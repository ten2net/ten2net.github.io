<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习之心</title>
    <link>https://ten2net.github.io/index.xml</link>
    <description>Recent content on 学习之心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>wangf@e-u.cn (wangf)</managingEditor>
    <webMaster>wangf@e-u.cn (wangf)</webMaster>
    <copyright>(c) 2017 ten2net 西安长城数字软件有限公司.</copyright>
    <lastBuildDate>Fri, 23 Dec 2016 09:13:49 +0800</lastBuildDate>
    <atom:link href="https://ten2net.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sublime Text3的介绍和使用</title>
      <link>https://ten2net.github.io/2016/12/23/sublime-text3%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 23 Dec 2016 09:13:49 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/23/sublime-text3%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;h1 id=&#34;1-安装&#34;&gt;1、安装&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;下载:&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%20Build%203126%20x64%20Setup.exe&#34;&gt;https://download.sublimetext.com/Sublime%20Text%20Build%203126%20x64%20Setup.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注册（Sublime Text 3 3126 注册码）
&lt;code&gt;
—– BEGIN LICENSE —–
Michael Barnes
Single User License
EA7E-821385
8A353C41 872A0D5C DF9B2950 AFF6F667
C458EA6D 8EA3C286 98D1D650 131A97AB
AA919AEC EF20E143 B361B1E7 4C8B7F04
B085E65E 2F5F5360 8489D422 FB8FC1AA
93F6323C FD7F7544 3F39C318 D95E6480
FCCC7561 8A4A1741 68FA4223 ADCEDE07
200C25BE DBBC4855 C4CFB774 C5EC138C
0FEC1CEF D9DCECEC D3A5DAD1 01316C36
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Free Communities Consultoria em Informática Ltda
Single User License
EA7E-801302
C154C122 4EFA4415 F1AAEBCC 315F3A7D
2580735A 7955AA57 850ABD88 72A1DDD8
8D2CE060 CF980C29 890D74F2 53131895
281E324E 98EA1FEF 7FF69A12 17CA7784
490862AF 833E133D FD22141D D8C89B94
4C10A4D2 24693D70 AE37C18F 72EF0BE5
1ED60704 651BC71F 16CA1B77 496A0B19
463EDFF9 6BEB1861 CA5BAD96 89D0118E
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Nicolas Hennion
Single User License
EA7E-866075
8A01AA83 1D668D24 4484AEBC 3B04512C
827B0DE5 69E9B07A A39ACCC0 F95F5410
729D5639 4C37CECB B2522FB3 8D37FDC1
72899363 BBA441AC A5F47F08 6CD3B3FE
CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D
0CC513E7 52FF2333 9F726D2C CDE53B4A
810C0D4F E1F419A3 CDA0832B 8440565A
35BF00F6 4CA9F869 ED10E245 469C233E
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Anthony Sansone
Single User License
EA7E-878563
28B9A648 42B99D8A F2E3E9E0 16DE076E
E218B3DC F3606379 C33C1526 E8B58964
B2CB3F63 BDF901BE D31424D2 082891B5
F7058694 55FA46D8 EFC11878 0868F093
B17CAFE7 63A78881 86B78E38 0F146238
BAE22DBB D4EC71A1 0EC2E701 C7F9C648
5CF29CA3 1CB14285 19A46991 E9A98676
14FD4777 2D8A0AB6 A444EE0D CA009B54
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Alexey Plutalov
Single User License
EA7E-860776
3DC19CC1 134CDF23 504DC871 2DE5CE55
585DC8A6 253BB0D9 637C87A2 D8D0BA85
AAE574AD BA7D6DA9 2B9773F2 324C5DEF
17830A4E FBCF9D1D 182406E9 F883EA87
E585BBA1 2538C270 E2E857C2 194283CA
7234FF9E D0392F93 1D16E021 F1914917
63909E12 203C0169 3F08FFC8 86D06EA8
73DDAEF0 AC559F30 A6A67947 B60104C6
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Peter Halliday
Single User License
EA7E-855988
3997BFF0 2856413A 7A555954 67069B78
06D8CE12 63EAF079 AD039757 79E16D13
C555AD90 465CBE53 10F6DFC4 D3A3C611
411106F8 0CFEB15F 0A7BB891 111F5ED2
C6AA8429 77913528 FA6291A9 B88D4550
F1D6AB13 BF9153BC 91B4DFFE D296CFE0
C1D8EB22 13D5F14E 75A699EC 49EDDC23
D89D0F9B D240B10A A3712467 09DE7870
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Fred Zirdung
Single User License
EA7E-844672
6089C0EC 22936E1A 1EADEBE2 B8654BBA
5C98FFA6 C0FD1599 0364779B 071C74FB
EEFE9EAB 92B3D867 CD1B32FE D190269F
6FC08F8F 8D24191D 32828465 942CE58E
AECE5307 08B62229 D788560A 6E0AAC4B
48A2D9EE 24FD8CAA 07BEBDF2 28EA86D4
CCB96084 6C34CAD2 E8A04F39 3B5A3CBC
3B668BB7 C94D0B4B 847D6D7F 4BC07375
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Wixel
Single User License
EA7E-848235
103D2969 8700C7ED 8173CF61 537000C0
EB3C7ECB 5E750F17 6B42B67C A190090B
7669164F C6F371A8 5A1D88D5 BDD0DA70
C065892B 7CC1BB2B 1C8B8C7C F08E7789
7C2A5241 35F86328 4C8F70D9 C023D7C2
11245C36 59A730DB 72BDB9A7 D5B20304
90E90E72 9F08CA25 73F49C20 179D938E
5BC8BEDA 13457A69 39E6265F 233767F9
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Daniel Russel
Single User License
EA7E-917420
9327EC62 44020C2A 45172A68 12FE13F1
1D22245B 680892EE F551F8EB C183D032
8B4EDB4B 479CB7E4 07E42EDD A780021D
56BADF42 AC05238B 023B47B1 EBA1B7DE
6DF9A383 159F32AE 04EBE100 1278B1D2
52E81B60 C68AA2E8 F84A20BE FE7990EB
5D44E4B6 16369263 1DDAACBC 280FF19E
86CF4319 0B8615A8 4FF0512E B123B8EC
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Peter Eriksson
Single User License
EA7E-890068
8E107C71 3100D6FC 2AC805BF 9E627C77
72E710D7 43392469 D06A2F5B F9304FBD
F5AB4DB2 7A95F172 FE68E300 42745819
E94AB2DF C1893094 ECABADC8 71FEE764
20224821 3EABF931 745AF882 87AD0A4B
33C6E377 0210D712 CD2B1178 82601542
C7FD8098 F45D2824 BC7DFB38 F1EBD38A
D7A3AFE0 96F938EA 2D90BD72 9E34CDF0
—— END LICENSE ——
&lt;/code&gt;
&lt;code&gt;
—– BEGIN LICENSE —–
Ryan Clark
Single User License
EA7E-812479
2158A7DE B690A7A3 8EC04710 006A5EEB
34E77CA3 9C82C81F 0DB6371B 79704E6F
93F36655 B031503A 03257CCC 01B20F60
D304FA8D B1B4F0AF 8A76C7BA 0FA94D55
56D46BCE 5237A341 CD837F30 4D60772D
349B1179 A996F826 90CDB73C 24D41245
FD032C30 AD5E7241 4EAA66ED 167D91FB
55896B16 EA125C81 F550AF6B A6820916
—— END LICENSE ——
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-sublime-text-3安装插件&#34;&gt;2、Sublime Text 3安装插件&lt;/h1&gt;

&lt;p&gt;Sublime Text的强大就是她拥有强大的可扩展性。您可根据自己的需要安装不同的插件；这使得她变的无比强大的同时又不失轻便。
- 插件安装方式一：直接安装：
    安装Sublime text 3插件很方便，可以直接下载安装包解压缩到Packages目录（菜单-&amp;gt;preferences-&amp;gt;packages）。
- 插件安装方式二：使用Package Control组件安装：
    按Ctrl+`调出console（注：安装有QQ输入法的这个快捷键会有冲突的，输入法属性设置-输入法管理-取消热键切换至QQ拼音）粘贴以下代码到底部命令行并回车：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重启Sublime Text 3。如果在Perferences-&amp;gt;package settings中看到package ontrol这一项，则安装成功。&lt;/li&gt;
&lt;li&gt;按下Ctrl+Shift+P调出命令面板输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。&lt;/li&gt;
&lt;li&gt;PS：国内使用SublimeText3，经常可能遇到无法安装可用插件问题，可remove掉Package Control重新安装下；如遇到连Package Control也无法安装，则可以在别处拷贝一份关于Package Control的文件－(Package Control.sublime-package)存放于Installed Packages目录之下即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;2-1-markdownediting插件-sublime-text的markdown利器&#34;&gt;2.1、MarkdownEditing插件：Sublime Text的Markdown利器&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Github项目地址：SublimeText-Markdown/MarkdownEditing&lt;/li&gt;
&lt;li&gt;安装：如果Sublime安装了Package Control,直接Ctrl+Shift+P输入MarkdownEditing，搜索到点击即可自行安装，重启便可使用用。&lt;/li&gt;
&lt;li&gt;关于特性：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;MarkdownEditing 从视觉和便捷性上针对 Markdown 文档的编辑进行了一系列的优化。具体如下(Mac下)：
安装后针对 md\mdown\mmd\txt 格式文件启用插件。颜色方案仿 Byword及iA writer。
自动匹配星号（*）、下划线（_）及反引号（`），选中文本按下以上符号能自动在所选文本前后添加配对的符号，方便粗体、斜体和代码框的输入。
直接输入配对的符号后按下退格键（backspace），则两个符号都会被删除；直接输入配对的符号后按下空格键，则会自动删除后一个。
对“选中文字后输入左括号”这一动作进行了调整，以便插入markdown链接。
拷贝一个链接，选中文本后按下 ⌘⌥V 会自动插入内联链接。
拷贝一个链接，选中文本后按下 ⌘⌥R 会自动插入引用链接。
⌘⌥K 插入链接；⌘⇧K 插入图片。
⌘⇧B 和 ⌘⇧I 分别用于加粗体和斜体。
⌘^1..6 对于选中的内容前加对应个数#,即对选中内容字体大小设置为h1~h6;
⌘⇧6插入文档脚注并且跳转到它的定义；具体可参见:Footnotes;
选中文本后按下 # 会自动在文本前后进行配对，可重复按下来定义标题级别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;2-2-markdown-preview插件-预览md&#34;&gt;2.2、Markdown Preview插件：预览MD&lt;/h2&gt;

&lt;p&gt;Markdown Preview较常用的功能是preview in browser和Export HTML in Sublime Text，前者可以在浏览器看到预览效果，后者可将markdown保存为html文件。
preview inbrowser据称是实时的，但是实践上还是需要在st保存，然后浏览器刷新才能看到新的效果，
好在markdown写得多的话也不需要每敲一行看一次效果。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;markdown preview默认没有快捷键，我们可以自己为preview in browser设置快捷键。
&amp;gt;
方法是在Preferences -&amp;gt; Key Bindings User打开的文件的中括号中添加以下代码(可在Key Bindings Default找到格式)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ &amp;quot;keys&amp;quot;: [&amp;quot;alt+m&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;markdown_preview_select&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;target&amp;quot;: &amp;quot;browser&amp;quot;} }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;随时alt+m，即可预览&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>曾经写过的比较好的SQL</title>
      <link>https://ten2net.github.io/2016/12/23/%E6%9B%BE%E7%BB%8F%E5%86%99%E8%BF%87%E7%9A%84%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84sql/</link>
      <pubDate>Fri, 23 Dec 2016 08:42:37 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/23/%E6%9B%BE%E7%BB%8F%E5%86%99%E8%BF%87%E7%9A%84%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84sql/</guid>
      <description>

&lt;h1 id=&#34;一-计算出差得分的存储过程&#34;&gt;一、计算出差得分的存储过程&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;
CREATE OR REPLACE PROCEDURE QUERY.PR_ONBUSINESSSCORE
(
STARTTIMEINS IN varchar, 
ENDTIMEINS IN varchar
) IS
startdata varchar2(80);
--出差开始时间
enddata varchar2(80);
--出差结束时间
starttimes varchar2(80); 
--考核开始时间
endtimes varchar2(80);
--考核结束时间
outofXIANcity varchar2(80);
--判断是否西安市内的出差
scoreStartDate varchar2(80);
--用来计算实际出差天数的开始时间
scoreEndDate varchar2(80);
--用来计算实际出差天数的结束时间  
SCORE_TIME varchar2(80);
--分数
isinsert varchar2(80);
--插入还是更新的判断条件
truedays varchar2(80);
--考核时间内的出差天数
username varchar(32);
--出差人员姓名
/******************************************************************************
计算出差得分的存储过程 

计算规则
市外：在考核时间段内的真实出差天数 * 0.3 + 出差次数 * 0.7
市内：在考核时间段内的真实出差天数 * 0.1 + 出差次数 * 0.3
出差次数的计算方法：出差开始时间在考核时间段内，即考核时间段内的出差，次数累加得到。
******************************************************************************/
CURSOR cur_onbusiness IS select t.* from V_ONBUSINESS_NEW
 t where t.duedate is not null;
--获得全部符合条件的出差记录
BEGIN
    delete YWZKH_TRAVELPOINT where STARTTIME = to_date(STARTTIMEINS, &#39;yyyy-mm-dd&#39;);
    starttimes := STARTTIMEINS;
    --得到考核开始时间
    if to_date(ENDTIMEINS, &#39;yyyy-mm-dd&#39;) &amp;gt; sysdate then
        endtimes := to_char(sysdate, &#39;yyyy-mm-dd&#39;);
    else
        endtimes := ENDTIMEINS;
    end if;
    --得到考核结束时间
    for cur_A in cur_onbusiness loop
    --循环开始，循环整个出差记录表
        username := cur_A.ASSIGNEE;
        startdata := to_char(cur_A.duedate, &#39;yyyy-mm-dd&#39;);
        --获得出差任务的开始时间
        outofXIANcity := cur_A.ONBUSINESSTYPE;
        --获得出差任务的名称判断是否是【出差】，若是，则是西安市外的出差，若不是，则是西安市内的出差
            if startdata &amp;gt;= starttimes then
                SCORE_TIME := 0.5;
            else
                SCORE_TIME := 0;
            end if;
            if cur_A.timeestimate is null then
                --此参数为空即代表出差人还未回来，以考核结束时间作为计算实际出差天数的结束时间
                scoreEndDate := ENDTIMEINS;
                enddata := to_char(sysdate, &#39;yyyy-mm-dd&#39;);
            else
                --计算出差结束时间
                select to_char((cur_A.duedate + (case ceil(cur_A.timeestimate) when 0 then 1 else ceil (cur_A.timeestimate) end)), &#39;yyyy-mm-dd&#39;) into enddata from dual;
                if enddata &amp;gt; endtimes then 
                    scoreEndDate := endtimes;
                else
                    scoreEndDate := enddata;
                end if;
                --用较早的结束时间作为计算实际出差天数的结束时间
            end if;
            if startdata &amp;gt; starttimes then
                scoreStartDate := startdata;
            else
                scoreStartDate := starttimes;
            end if;
            --用较晚的开始时间作为计算实际出差天数的开始时间
        isinsert := null;
        if scoreStartDate &amp;lt;= scoreEndDate then 
            if scoreStartDate &amp;lt;= to_char(sysdate, &#39;yyyy-mm-dd&#39;) then
                dbms_output.put_line(cur_A.duedate||&#39;!!!!!!&#39;||scoreStartDate||&#39;!!!!!!!!!!!!!!!!&#39;||scoreEndDate);
                dbms_output.put_line(username);
                if scoreEndDate &amp;gt; to_char(sysdate, &#39;yyyy-mm-dd&#39;) then
                    scoreEndDate := to_char(sysdate, &#39;yyyy-mm-dd&#39;);
                end if;
                begin
                    select count(id) into isinsert from YWZKH_TRAVELPOINT where ID = cur_A.pkey and STARTTIME = to_date(STARTTIMEINS, &#39;yyyy-mm-dd&#39;) and endtime=to_date(ENDTIMEINS, &#39;yyyy-mm-dd&#39;);
                    if isinsert = &#39;0&#39; then
                        insert into YWZKH_TRAVELPOINT 
                        (
                            ID, PrOJECT, REPORTER, ASSIGNEE, SUMMARY, DUEDATE, TIMEESTIMATE, ISSUESTATUS, 
                            ENDDATE, STARTTIME, ENDTIME, CREATEDATE, SCORE_DAY, SCORE_TIMES, TRUETIME
                        )
                        values
                        (
                            cur_A.pkey, cur_A.project, cur_A.REPORTER, cur_A.ASSIGNEE, cur_A.SUMMARY, cur_A.DUEDATE, 
                            cur_A.TIMEESTIMATE, cur_A.ISSUESTATUS, to_date(enddata, &#39;yyyy-mm-dd&#39;), to_date(STARTTIMEINS, &#39;yyyy-mm-dd&#39;), to_date(ENDTIMEINS, &#39;yyyy-mm-dd&#39;), 
                            sysdate, fun_getbusinessscore(outofXIANcity, scoreStartDate, scoreEndDate, enddata, cur_A.timeestimate), to_number(SCORE_TIME), to_date(to_char(sysdate, &#39;yyyy-mm-dd&#39;), &#39;yyyy-mm-dd&#39;)
                        ); 
                        commit;
                    else
                        update YWZKH_TRAVELPOINT set SCORE_DAY = fun_getbusinessscore(outofXIANcity, scoreStartDate, scoreEndDate, enddata, cur_A.timeestimate), SCORE_TIMES = to_number(SCORE_TIME) 
                        where ID = cur_A.pkey and STARTTIME = to_date(STARTTIMEINS, &#39;yyyy-mm-dd&#39;) and endtime=to_date(ENDTIMEINS, &#39;yyyy-mm-dd&#39;);
                        commit;                        
                    end if;    
                end;
                update YWZKH_TRAVELPOINT set TRUEDAYS = SCORE_DAY / (case outofXIANcity when &#39;市内&#39; then 0.1 else 0.3 end)
                where ID = cur_A.pkey and STARTTIME = to_date(STARTTIMEINS, &#39;yyyy-mm-dd&#39;) and endtime=to_date(ENDTIMEINS, &#39;yyyy-mm-dd&#39;);
                end if;
        end if;
    end loop;
    --循环结束
END PR_ONBUSINESSSCORE;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;二-给时间维度表插入数据&#34;&gt;二、给时间维度表插入数据&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE Pr_Dw_Dim_Date_Data_Gen
(
beginYYYYMMDD NUMBER --开始日期
)
AS
beginDate DATE;  --参数转换为日期后的结果
currentDate DATE ;--循环日期
v_CalHalfYear VARCHAR2(6)  ;--在日历上属于“上半年”，还是“下半年”
v_StatHalfYear VARCHAR2(6)  ;--在统计时属于“上半年”，还是“下半年”
v_CALQUARTER  NUMBER  ;--日历季度（1|2|3|4）
v_STATQUARTER  NUMBER  ;--日历季度（1|2|3|4）
v_CAL10DAYS   VARCHAR2(6)  ;--在日历上属于“上旬”，还是“中旬”、“下旬”
v_ISHOLIDAY  VARCHAR2(2) :=&#39;否&#39;  ;--是否为节假日，公司规定每个双休日及法定假日为节假日
v_ISLAWHOLIDAY VARCHAR2(2) :=&#39;否&#39; ;--是否为法定节假日�

i INT ;
maxRoomsizeLimit INTEGER;  
curTClassID VARCHAR2(32);    
v_errcode  INTEGER;
v_errormsg VARCHAR2(200);
cc INTEGER :=0;

tmpVar NUMBER;
/******************************************************************************
给时间维度表插入数据
******************************************************************************/
BEGIN
    BEGIN
       beginDate :=TO_DATE(TO_CHAR(beginYYYYMMDD),&#39;YYYY-MM-DD&#39;);
    EXCEPTION
       WHEN OTHERS THEN
          RAISE;
    END;
   
   
   FOR i IN 0 .. 365*10 LOOP
       currentDate := beginDate + i;
       
       IF TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))&amp;lt;701 THEN
          v_CalHalfYear :=&#39;上半年&#39;;
       ELSE
          v_CalHalfYear :=&#39;下半年&#39;;
       END IF;
       
       v_StatHalfYear:=v_CalHalfYear;   ----先让它们相同
       
       IF TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))&amp;lt;401 THEN    --季度
          v_CALQUARTER :=1;
       ELSIF TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))&amp;lt;701 THEN
          v_CALQUARTER :=2;
       ELSIF TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))&amp;lt;1001 THEN
          v_CALQUARTER :=3;
       ELSE
          v_CALQUARTER :=4;       
       END IF;  
       v_STATQUARTER:=v_CALQUARTER;
       
       IF TO_NUMBER(TO_CHAR(currentDate,&#39;DD&#39;))&amp;lt;10 THEN
          v_CAL10DAYS :=&#39;上旬&#39;;
       ELSIF TO_NUMBER(TO_CHAR(currentDate,&#39;DD&#39;))&amp;lt;20 THEN
          v_CAL10DAYS :=&#39;中旬&#39;;
       ELSE
          v_CAL10DAYS :=&#39;下旬&#39;;         
       END IF;  
       
       v_ISHOLIDAY :=&#39;否&#39;  ;--是否为节假日，公司规定每个双休日及法定假日为节假日
       v_ISLAWHOLIDAY:=&#39;否&#39; ;--是否为法定节假日�    IF TO_NUMBER(TO_CHAR(currentDate,&#39;D&#39;))=1 OR
          TO_NUMBER(TO_CHAR(currentDate,&#39;D&#39;))=7 THEN
              v_ISHOLIDAY :=&#39;是&#39;;
       END IF;        
    
       IF TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=501 OR    --五一
          TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=1001 OR   --国庆节
          TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=1002 OR   --国庆节
          TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=1003 OR   --国庆节
          TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=101  OR   --元旦
          TO_NUMBER(TO_CHAR(currentDate,&#39;MMDD&#39;))=405  OR   --清明（随是否润2月二不同，先这样写死吧）
          
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=107  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=106  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=105  OR   --农历春节        
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=104  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=103  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=102  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=101  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=1230  OR   --农历春节       
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=1229  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=1228  OR   --农历春节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=1227  OR   --农历春节

          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=815  OR   --农历中秋节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=505  OR   --农历端午节
          TO_NUMBER(TO_CHAR(F_Getlunar_Date(currentDate),&#39;MMDD&#39;))=1227    --农历春节    
       THEN
          v_ISHOLIDAY :=&#39;是&#39;;    
          v_ISLAWHOLIDAY :=&#39;是&#39;;   
       END IF;      
    
    
        BEGIN
                   INSERT INTO DW_DIM_DATE (
               DATEID, CALDATE, CALYEAR, 
               CALMONTH, CALDAY, CALHALFYEAR, 
               CALQUARTER, CALWEEK, CAL10DAYS, 
               CALYYYYMM, WEEKDAY, STATYEAR, 
               STATMONTH, STATDAY, STATYYYYMM, 
               ISSTATDAY, ISHOLIDAY, ISLAWHOLIDAY, 
               STATHALFYEAR, STATQUARTER) 
                   VALUES (TO_NUMBER(TO_CHAR(currentDate,&#39;YYYYMMDD&#39;)) ,currentDate ,TO_NUMBER(TO_CHAR(currentDate,&#39;YYYY&#39;)) ,
               TO_NUMBER(TO_CHAR(currentDate,&#39;MM&#39;)) ,TO_NUMBER(TO_CHAR(currentDate,&#39;DD&#39;)) ,v_CalHalfYear ,
               v_CALQUARTER ,TO_NUMBER(TO_CHAR(currentDate,&#39;WW&#39;)) ,v_CAL10DAYS ,
                TO_NUMBER(TO_CHAR(currentDate,&#39;YYYYMM&#39;)),DECODE(TO_NUMBER(TO_CHAR(currentDate,&#39;D&#39;)),2,&#39;星期一&#39;,3,&#39;星期二&#39;,4,&#39;星期三&#39;,5,&#39;星期四&#39;,6,&#39;星期五&#39;,7,&#39;星期六&#39;,&#39;星期日&#39;) ,TO_NUMBER(TO_CHAR(currentDate,&#39;YYYY&#39;)),
                 TO_NUMBER(TO_CHAR(currentDate,&#39;MM&#39;)) ,TO_NUMBER(TO_CHAR(currentDate,&#39;DD&#39;)) ,TO_NUMBER(TO_CHAR(currentDate,&#39;YYYYMM&#39;)) ,
                CASE WHEN TO_NUMBER(TO_CHAR(currentDate,&#39;DD&#39;))&amp;lt;&amp;gt;26 THEN &#39;否&#39; ELSE &#39;是&#39; END ,v_ISHOLIDAY , v_ISLAWHOLIDAY  ,
                v_StatHalfYear, v_STATQUARTER );
         EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                 NULL;
            WHEN OTHERS THEN
               RAISE_APPLICATION_ERROR(-20003,SQLERRM);
         END;

   END LOOP;
   COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RAISE_APPLICATION_ERROR(-20003,SQLERRM);
/*     
--******************************************************************************
作者：王峰
公司：长城数字软件
发布日期：2005－1-6
联系电话：887669825-862
--*******************************************************************************
*/
END Pr_Dw_Dim_Date_Data_Gen;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;二-给工作量事实表插入数据&#34;&gt;二、给工作量事实表插入数据&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE pr_dw_fact_workloadbyday (
   currentyyyymmdd   NUMBER                                         --开始日期
)
AS
   currentdate              DATE;                                  --循环日期
   v_projectid              NUMBER;                                  --项目ID
   v_staffaccount           VARCHAR2 (32);                         --员工帐号
   v_numberofpage1          NUMBER         := 0;
   v_numberofpage2          NUMBER         := 0;
   v_numberofpage3          NUMBER         := 0;
   v_numberofinterface1     NUMBER         := 0;
   v_numberofinterface2     NUMBER         := 0;
   v_numberofinterface3     NUMBER         := 0;
   v_numbersofalltask       NUMBER         := 0;
   v_numbersofoverduetask   NUMBER         := 0;
   v_hoursforplan           NUMBER (10, 2) := 0;
   v_hoursoffact            NUMBER (10, 2) := 0;

   CURSOR c2
   IS
      SELECT staffname, projectname, assignee
        FROM dw_fact_workload
       WHERE dateid = TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;));

   c1rec                    c2%ROWTYPE;
/******************************************************************************
统计工作量
******************************************************************************/
BEGIN
   BEGIN
      currentdate := TO_DATE (TO_CHAR (currentyyyymmdd), &#39;YYYY-MM-DD&#39;);
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE;
   END;

   BEGIN
--按天统计2010-3-8以来每个人的D类bug数到 DW_FACT_BUG_D表中  --2011年3月31日，根据小王锋的要求将统计低级bug的方式由统计bug类型为&amp;quot;D类&amp;quot;改为&amp;quot;X类&amp;quot;
      INSERT INTO dw_fact_bug_d
                  (dateid, staffname, bugtype, bugnum)
         SELECT   dateid, NVL (bugcreator, &#39;不详&#39;) bugcreator, bugtype,
                  COUNT (*) bugnum
             FROM (SELECT TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;)
                                    ) dateid,
                          issue.ID issue,
                          (SELECT NAME
                             FROM v_gds_user_from_hrmis
                            WHERE empno = stringvalue) bugcreator,
                          &#39;D类&#39; bugtype
                     FROM (SELECT *
                             FROM customfieldvalue
                            WHERE customfield = 10061) customfieldvalue,
                          issue,
                          (SELECT pkey, os_currentstep.status,
                                  os_currentstep.start_date
                             FROM issue, os_currentstep, customfieldvalue
                            WHERE issuestatus = 6
                              AND os_currentstep.entry_id =
                                                         issue.workflow_id
                              AND issue.ID = customfieldvalue.issue
                              AND customfieldvalue.customfield = &#39;10060&#39;
                              AND created &amp;gt;
                                          TO_DATE (&#39;2010-03-08&#39;, &#39;YYYY-MM-DD&#39;)
                              AND customfieldvalue.stringvalue = &#39;X类&#39;) hadclosedissue
                    WHERE issue.pkey = hadclosedissue.pkey
                      AND hadclosedissue.start_date &amp;gt;=
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 00:00:00&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND hadclosedissue.start_date &amp;lt;
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 23:59:59&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND issue.ID = customfieldvalue.issue(+))
            WHERE bugtype IS NOT NULL
         GROUP BY dateid, bugcreator, bugtype;
   END;

   BEGIN                         --按天统计每个人的各类bug数到 DW_FACT_BUG表中
      INSERT INTO dw_fact_bug
                  (dateid, staffname, bugtype, bugnum)
         SELECT   dateid, NVL (bugcreator, &#39;不详&#39;) bugcreator, bugtype,
                  COUNT (*) bugnum
             FROM (SELECT TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;)
                                    ) dateid,
                          customfieldvalue.issue,
                          (SELECT NAME
                             FROM v_gds_user_from_hrmis
                            WHERE empno = stringvalue) bugcreator,
                          (SELECT stringvalue
                             FROM customfieldvalue
                            WHERE issue = issue.ID
                              AND customfieldvalue.customfield = 10060)
                                                                      bugtype
                     FROM customfieldvalue,
                          issue,
                          (SELECT pkey, os_currentstep.status,
                                  os_currentstep.start_date
                             FROM issue, os_currentstep
                            WHERE issuestatus = 6
                              AND os_currentstep.entry_id =
                                                         issue.workflow_id) hadclosedissue
                    WHERE issue.pkey = hadclosedissue.pkey
                      AND hadclosedissue.start_date &amp;gt;=
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 00:00:00&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND hadclosedissue.start_date &amp;lt;
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 23:59:59&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND issue.ID = customfieldvalue.issue
                      AND customfieldvalue.customfield = 10061)
            WHERE bugtype IS NOT NULL
         GROUP BY dateid, bugcreator, bugtype;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;                   --end ---按天统计每个人的各类bug数到 DW_FACT_BUG表中

   BEGIN            --按天统计每个项目的各类bug数到 DW_FACT_BUG_BY_PROJECT表中
      INSERT INTO dw_fact_bug_by_project
                  (dateid, projectname, bugtype, bugnum)
         SELECT   dateid, projectname, bugtype, COUNT (*) bugnum
             FROM (SELECT TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;)
                                    ) dateid,
                          customfieldvalue.issue,
                          (SELECT pname
                             FROM project
                            WHERE ID = issue.project) projectname,
                          (SELECT stringvalue
                             FROM customfieldvalue
                            WHERE issue = issue.ID
                              AND customfieldvalue.customfield = 10060)
                                                                      bugtype
                     FROM customfieldvalue,
                          issue,
                          (SELECT pkey, os_currentstep.status,
                                  os_currentstep.start_date
                             FROM issue, os_currentstep
                            WHERE issuestatus = 6
                              AND os_currentstep.entry_id =
                                                         issue.workflow_id) hadclosedissue
                    WHERE issue.pkey = hadclosedissue.pkey
                      AND hadclosedissue.start_date &amp;gt;=
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 00:00:00&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND hadclosedissue.start_date &amp;lt;
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 23:59:59&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND issue.ID = customfieldvalue.issue
                      AND customfieldvalue.customfield = 10061)
            WHERE bugtype IS NOT NULL
         GROUP BY dateid, projectname, bugtype;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;    --end -----按天统计每个项目的各类bug数到 DW_FACT_BUG_BY_PROJECT表中

   BEGIN
      --1、统计任务点数
      INSERT INTO dw_fact_workload
                  (dateid, staffname, projectname, staffrole, staffdept,
                   staffgender, pointnumbersoftask, numberofpage1,
                   numberofpage2, numberofpage3, umbersofinterface1,
                   umbersofinterface2, umbersofinterface3, numbersofalltask,
                   numbersofoverduetask, hoursforplan, hoursoffact,
                   pointnumbers_businesstrip_task, assignee)
         SELECT TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;)),
                user.fullname,
                NVL ((SELECT pname
                        FROM project
                       WHERE ID = stat.project), &#39;不详&#39;) pname, &#39;开发人员&#39;,
                &#39;开发部&#39;, &#39;男&#39;, NVL (stat.workload, 0) nvl_workload, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, NVL (businesstrip_numbervalue, 0),
                stat.assignee
           FROM (SELECT   assignee, issue.project,
                          SUM (numbervalue) workload
                     FROM (SELECT *
                             FROM customfieldvalue
                            WHERE customfield = 10050) customfieldvalue,
                          issue,
                          (SELECT pkey, os_currentstep.status,
                                  os_currentstep.start_date
                             FROM issue, os_currentstep
                            WHERE (issuestatus = 6 OR issuestatus = 5)
                              AND os_currentstep.entry_id =
                                                         issue.workflow_id) hadclosedissue
                    WHERE issue.pkey = hadclosedissue.pkey(+)
                      AND hadclosedissue.start_date &amp;gt;=
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 00:00:00&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND hadclosedissue.start_date &amp;lt;
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 23:59:59&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND issue.ID = customfieldvalue.issue
                 GROUP BY assignee, issue.project) stat,
                
                ---added by zhangyp 20120409  计算出差点数 运维组考核使用
                (SELECT   assignee, issue.project,
                          SUM (numbervalue) businesstrip_numbervalue
                     FROM customfieldvalue,
                          issue,
                          (SELECT pkey, os_currentstep.status,
                                  os_currentstep.start_date
                             FROM issue, os_currentstep
                            WHERE (issuestatus = 6 OR issuestatus = 5)
                              AND os_currentstep.entry_id =
                                                         issue.workflow_id) hadclosedissue
                    WHERE issue.pkey = hadclosedissue.pkey
                      AND summary LIKE &#39;【出差】%&#39;
                      AND hadclosedissue.start_date &amp;gt;=
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 00:00:00&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND hadclosedissue.start_date &amp;lt;
                             TO_DATE (   TO_CHAR (currentdate - 1,
                                                  &#39;YYYY-MM-DD&#39;
                                                 )
                                      || &#39; 23:59:59&#39;,
                                      &#39;YYYY-MM-DD HH24:MI:SS&#39;
                                     )
                      AND issue.ID = customfieldvalue.issue
                      AND customfieldvalue.customfield = 10050
                 GROUP BY assignee, issue.project) businesstrip_stat,
                
                ---added over by zhangyp 20120409  计算出差点数 运维组考核使用
                (SELECT c.ID, c.username, a.propertyvalue fullname
                   FROM propertyentry b, propertystring a, userbase c
                  WHERE a.ID = b.ID
                    AND b.property_key = &#39;fullName&#39;
                    AND b.entity_id = c.ID) user
          WHERE stat.project = businesstrip_stat.project(+)
            AND stat.assignee = businesstrip_stat.assignee(+)
            AND stat.assignee = user.username
            AND stat.project IS NOT NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line (SQLERRM);
   END;

   --2开始统计页面及接口数据
   BEGIN
      OPEN c2;

      LOOP
         FETCH c2
          INTO c1rec;

         &amp;lt;&amp;lt;nextstep&amp;gt;&amp;gt;
         EXIT WHEN c2%NOTFOUND;

         BEGIN
            SELECT ID
              INTO v_projectid
              FROM project
             WHERE pname = c1rec.projectname AND ROWNUM = 1;      --得到项目ID

            SELECT c.username
              INTO v_staffaccount                               --得到员工帐号
              FROM propertyentry b, propertystring a, userbase c
             WHERE a.ID = b.ID
               AND b.property_key = &#39;fullName&#39;
               AND b.entity_id = c.ID
               AND a.propertyvalue = c1rec.staffname
               AND ROWNUM = 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               GOTO nextstep;
         END;

      /*closed by zhangyp 20120409
            SELECT  SUM(numbervalue) INTO v_numberOFPage1      --1统计某人在某个项目上某天完成的简单页面个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10002;

            SELECT  SUM(numbervalue) INTO v_numberOFPage2     --2统计某人在某个项目上某天完成的普通页面个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10001;

            SELECT  SUM(numbervalue) INTO v_numberOFPage3     --3统计某人在某个项目上某天完成的复杂页面个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10000;

            SELECT  SUM(numbervalue) INTO v_numberOFInterface1      --4统计某人在某个项目上某天完成的简单接口个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10005;

            SELECT  SUM(numbervalue) INTO v_numberOFInterface2     --5统计某人在某个项目上某天完成的普通接口个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10004;

            SELECT  SUM(numbervalue) INTO v_numberOFInterface3     --6统计某人在某个项目上某天完成的复杂接口个数
            FROM CUSTOMFIELDVALUE ,ISSUE,
                 (SELECT pKey, OS_CURRENTSTEP.STATUS, OS_CURRENTSTEP.START_DATE
                  FROM ISSUE, OS_CURRENTSTEP
                  WHERE ISSUESTATUS = 6 AND
                        OS_CURRENTSTEP.ENTRY_ID = ISSUE.WORKFLOW_ID
                  ) hadClosedIssue
            WHERE ISSUE.pKey=hadClosedIssue.pKey AND
                  hadClosedIssue.START_DATE&amp;gt;=TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 00:00:00&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  hadClosedIssue.START_DATE&amp;lt;TO_DATE(TO_CHAR(currentDate -1,&#39;YYYY-MM-DD&#39;)||&#39; 23:59:59&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;) AND
                  ISSUE.ID=CUSTOMFIELDVALUE.issue AND
                 ISSUE.PROJECT=V_PROJECTID AND
                 ISSUE.ASSIGNEE=V_STAFFACCOUNT AND
                  CUSTOMFIELDVALUE.CUSTOMFIELD=10003;

----closed by zhangyp 20120409*/------------------------------以下四个指标待求-----------------------------------------------------------------
            --2.1V_NUMBERSOFALLTASK
         SELECT COUNT (*)
           INTO v_numbersofalltask
           --6统计某人在某个项目上某天完成的任务及子任务个数（逾期和按期的都算）
         FROM   issue,
                (SELECT pkey, os_currentstep.status,
                        os_currentstep.start_date
                   FROM issue, os_currentstep
                  WHERE (issuestatus = 6 OR issuestatus = 5)
                    AND os_currentstep.entry_id = issue.workflow_id) hadclosedissue
          WHERE issue.pkey = hadclosedissue.pkey
            AND hadclosedissue.start_date &amp;gt;=
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 00:00:00&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND hadclosedissue.start_date &amp;lt;
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 23:59:59&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND issue.project = v_projectid
            AND issue.assignee = v_staffaccount;

         --2.2V_NUMBERSOFOVERDUETASK
         SELECT COUNT (*)
           INTO v_numbersofoverduetask
           --6统计某人在某个项目上某天完成的任务及子任务个数（只算逾期的）
         FROM   issue,
                (SELECT pkey, os_currentstep.status,
                        os_currentstep.start_date
                   FROM issue, os_currentstep
                  WHERE (issuestatus = 6 OR issuestatus = 5)
                    AND os_currentstep.entry_id = issue.workflow_id) hadclosedissue
          WHERE issue.pkey = hadclosedissue.pkey
            AND hadclosedissue.start_date &amp;gt;=
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 00:00:00&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND hadclosedissue.start_date &amp;lt;
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 23:59:59&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND issue.duedate IS NOT NULL
            AND hadclosedissue.start_date &amp;gt;
                   TO_DATE (   TO_CHAR (issue.duedate, &#39;YYYY-MM-DD&#39;)
                            || &#39; 23:59:59&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND issue.project = v_projectid
            AND issue.assignee = v_staffaccount;

         --2.3V_HOURSFORPLAN
         SELECT ROUND (SUM (timeoriginalestimate) / 3600),
                ROUND (SUM (timespent) / 3600)
           INTO v_hoursforplan,
                v_hoursoffact
           --6统计某人在某个项目上某天完成的任务及子任务的总计估算时间和实际工作时间
         FROM   issue,
                (SELECT pkey, os_currentstep.status,
                        os_currentstep.start_date
                   FROM issue, os_currentstep
                  WHERE (issuestatus = 6 OR issuestatus = 5)
                    AND os_currentstep.entry_id = issue.workflow_id) hadclosedissue
          WHERE issue.pkey = hadclosedissue.pkey
            AND hadclosedissue.start_date &amp;gt;=
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 00:00:00&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND hadclosedissue.start_date &amp;lt;
                   TO_DATE (   TO_CHAR (currentdate - 1, &#39;YYYY-MM-DD&#39;)
                            || &#39; 23:59:59&#39;,
                            &#39;YYYY-MM-DD HH24:MI:SS&#39;
                           )
            AND issue.project = v_projectid
            AND issue.assignee = v_staffaccount;

-----99更新统计指标---------------------------------------------------------------------------------------------
         UPDATE dw_fact_workload
            SET numberofpage1 = NVL (v_numberofpage1, 0),
                numberofpage2 = NVL (v_numberofpage2, 0),
                numberofpage3 = NVL (v_numberofpage3, 0),
                umbersofinterface1 = NVL (v_numberofinterface1, 0),
                umbersofinterface2 = NVL (v_numberofinterface2, 0),
                umbersofinterface3 = NVL (v_numberofinterface3, 0),
                numbersofalltask = NVL (v_numbersofalltask, 0),
                numbersofoverduetask = NVL (v_numbersofoverduetask, 0),
                hoursforplan = NVL (v_hoursforplan, 0),
                hoursoffact = NVL (v_hoursoffact, 0)
          WHERE dateid = TO_NUMBER (TO_CHAR (currentdate - 1, &#39;YYYYMMDD&#39;))
            AND staffname = c1rec.staffname
            AND projectname = c1rec.projectname
            AND assignee = c1rec.assignee;
      END LOOP;

      CLOSE c2;
   END;

   COMMIT;
   --pr_mail_for_no_worklod;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      raise_application_error (-20003, SQLERRM);
/*
--******************************************************************************
作者：王峰
公司：长城数字软件
发布日期：2005－1-6
联系电话：887669825-862

SELECT SUM(NUMBEROFPAGE1), SUM(NUMBEROFPAGE2),
   SUM(NUMBEROFPAGE3), SUM(UMBERSOFINTERFACE1), SUM(UMBERSOFINTERFACE2),
   SUM(UMBERSOFINTERFACE3)
FROM DW_FACT_WORKLOAD
--*******************************************************************************
*/
END pr_dw_fact_workloadbyday;
/


&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-利用job来调度该存储过程将任务平台统计数据生成为xml文件&#34;&gt;3、利用job来调度该存储过程将任务平台统计数据生成为xml文件.&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE .Pr_Xml_Data_File_Gen IS
/******************************************************************************
利用job来调度该存储过程将任务平台统计数据生成为xml文件，以便门户调用
作者：王峰
编写时间：2008-11-21
******************************************************************************/
     
     
     workload_file_30 VARCHAR2(128) :=&#39;D:\SSSS\ABDGF\OA\StatDate\workload_file_30.xml&#39;;
     personRow v_workload_last30day%ROWTYPE;      --获取游标的行变量
     TYPE person_cur IS REF CURSOR; --自定义REF游标
     cur person_cur;    
     tempSql VARCHAR2(500) := &#39;SELECT &amp;quot;员工姓名&amp;quot;, &amp;quot;简单页面数&amp;quot;, &amp;quot;普通页面数&amp;quot;,    &amp;quot;复杂页面数&amp;quot;, &amp;quot;简单接口数&amp;quot;, &amp;quot;普通接口数&amp;quot;,    &amp;quot;复杂接口数&amp;quot;, &amp;quot;任务个数&amp;quot;, &amp;quot;逾期任务个数&amp;quot;,    &amp;quot;计划工时&amp;quot;, &amp;quot;实际工时&amp;quot;, &amp;quot;折算后编码工作点数&amp;quot;,   &amp;quot;其它工作点数&amp;quot;, &amp;quot;公司最低&amp;quot;, &amp;quot;公司最高&amp;quot;,   ROUND(&amp;quot;公司平均&amp;quot;) 公司平均, &amp;quot;A类BUG数&amp;quot;, &amp;quot;B类BUG数&amp;quot;,   &amp;quot;C类BUG数&amp;quot;, &amp;quot;D类BUG数&amp;quot;, &amp;quot;E类BUG数&amp;quot;, &amp;quot;应得点数&amp;quot;, &amp;quot;扣除点数&amp;quot;, &amp;quot;合计点数&amp;quot;,&amp;quot;排名&amp;quot; FROM v_workload_last30day &#39;;  
          --初始的查询语句
     sqlWhereStr  VARCHAR2(500) :=&#39; &#39;;
     sqlOrderByStr  VARCHAR2(500) :=&#39; order by &amp;quot;排名&amp;quot;&#39;;
     doc xmlDom.DOMDocument := xmldom.newDOMDocument;        -- 创建文档对象
     main_node xmlDom.DOMNode := xmldom.makeNode(doc);       -- 获得文档节点
     root_elmt xmlDom.DOMElement:= xmldom.createElement(doc, &#39;统计数据&#39;);   -- 创建根元素
     --==================================================
     --以下定义元素
     person_elmt xmlDom.DOMElement;      --定义PERSON元素
     summary_elmt xmlDom.DOMElement;      --定义summary元素
     details_elmt xmlDom.DOMElement;      --定义details元素
     --==================================================
     --以下定义节点
     root_node xmlDom.DOMNode;   --定义统计数据节点
     person_node xmlDom.DOMNode;   --定义PERSON节点
     summary_node xmlDom.DOMNode;   --定义summary节点
     details_node xmlDom.DOMNode;   --定义details节点
     temp_node xmlDom.DOMNode;
     --统计数据变量
     v_point_min NUMBER :=0; --公司最低点
     v_point_max NUMBER :=0; --公司最高点
     v_point_avg NUMBER :=0; ----公司平均点数
     v_gzlgsjd NUMBER :=0; ----工作量估算精度
BEGIN
     -- 向文档节点加入根节点:&amp;lt;统计数据&amp;gt;&amp;lt;/统计数据&amp;gt;
     root_node := xmldom.appendChild(main_node, xmldom.makeNode(root_elmt));
       --===========================================================================--
       summary_elmt := xmldom.createElement(doc, &#39;摘要&#39;); --创建摘要元素
       -- 向统计数据节点加入摘要节点&amp;lt;摘要&amp;gt;&amp;lt;/摘要&amp;gt;
       summary_node := xmldom.appendChild(root_node, xmldom.makeNode(summary_elmt));
       --===========================================================================--
       --向摘要节点加入下列属性
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;标题&#39;,&#39;最近一个月工作量统计排名&#39;);
        --得到统计摘要数据
        SELECT &amp;quot;公司最低&amp;quot;,   &amp;quot;公司最高&amp;quot;, ROUND(&amp;quot;公司平均&amp;quot;) 公司平均 INTO v_point_min,v_point_max,v_point_avg FROM v_workload_last30day WHERE ROWNUM=1;
        --写统计摘要数据到dom
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;公司最低&#39;,v_point_min);
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;公司最高&#39;,v_point_max);
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;公司平均&#39;,v_point_avg);
        SELECT ROUND((100*(SUM(&amp;quot;实际工时&amp;quot;) - SUM(&amp;quot;计划工时&amp;quot;)))/SUM(&amp;quot;计划工时&amp;quot;)) 工作量估算精度   INTO  v_gzlgsjd FROM v_workload_last30day ;
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;工作量估算精度&#39;,v_gzlgsjd);
       --===========================================================================--
     --附加查询条件,准备得到统计明细数据
       --===========================================================================--
       details_elmt := xmldom.createElement(doc, &#39;统计明细&#39;); --创建摘要元素
       -- 向统计数据节点加入统计明细节点&amp;lt;统计明细&amp;gt;&amp;lt;/统计明细&amp;gt;
       details_node := xmldom.appendChild(root_node, xmldom.makeNode(details_elmt));
       --===========================================================================--   
     tempSql := tempSql||sqlWhereStr||sqlOrderByStr;
     --打开游标
     OPEN cur FOR tempSql;
     --遍历游标
     LOOP
       FETCH cur INTO personRow;
       EXIT WHEN cur%NOTFOUND;
       --===========================================================================--
       person_elmt := xmldom.createElement(doc, &#39;员工&#39;); --创建PERSON元素
       -- 向PEOPLE节点加入PERSON节点&amp;lt;PERSON&amp;gt;&amp;lt;/PERSON&amp;gt;
       person_node := xmldom.appendChild(details_node, xmldom.makeNode(person_elmt));
       --===========================================================================--
       --向PERSON节点加入属性下列属性
        xmlDom.SETATTRIBUTE(person_elmt,&#39;员工姓名&#39;,personRow.员工姓名);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;简单页面数&#39;,personRow.简单页面数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;普通页面数&#39;,personRow.普通页面数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;复杂页面数&#39;,personRow.复杂页面数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;简单接口数&#39;,personRow.简单接口数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;普通接口数&#39;,personRow.普通接口数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;复杂接口数&#39;,personRow.复杂接口数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;任务个数&#39;,personRow.任务个数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;逾期任务个数&#39;,personRow.逾期任务个数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;计划工时&#39;,personRow.计划工时);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;实际工时&#39;,personRow.实际工时);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;折算后编码工作点数&#39;,personRow.折算后编码工作点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;其它工作点数&#39;,personRow.其它工作点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;A类BUG数&#39;,personRow.A类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;B类BUG数&#39;,personRow.B类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;C类BUG数&#39;,personRow.C类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;D类BUG数&#39;,personRow.D类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;E类BUG数&#39;,personRow.E类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;应得点数&#39;,personRow.应得点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;扣除点数&#39;,personRow.扣除点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;合计点数&#39;,personRow.合计点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;排名&#39;,personRow.排名); 
       --===========================================================================--
--        name_elmt := xmldom.createElement(doc, &#39;NAME&#39;);      --创建NAME元素
--        --向PERSON节点加入子节点NAME
--        name_node := xmldom.appendChild(person_node,xmlDom.makeNode(name_elmt));
--        --向NAME节点加入文本
--        temp_node := xmldom.appendChild(name_node , xmlDom.makeNode(xmldom.createTextNode(doc,personRow.NAME)));
       --===========================================================================--
     END LOOP;
     CLOSE cur;
     --写入硬盘
     xmlDom.writeToFile(doc,workload_file_30,&#39;UTF-8&#39;);
     
   EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END Pr_Xml_Data_File_Gen;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-利用job来调度该存储过程将任务平台统计数据生成为xml文件&#34;&gt;4、利用job来调度该存储过程将任务平台统计数据生成为xml文件.&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE .Pr_Xml_Staff_Status_Today IS
/******************************************************************************
利用job来调度该存储过程将任务平台统计数据生成为xml文件
作者：王峰
编写时间：2008-11-21
******************************************************************************/
     workload_file_30 VARCHAR2(128) :=&#39;D:\WEB7895ll\ABCDE\OA\StatDate\staff_status_today.xml&#39;;
     personRow v_staff_workstatus_today%ROWTYPE;      --获取游标的行变量
     TYPE person_cur IS REF CURSOR; --自定义REF游标
     cur person_cur;    
     tempSql VARCHAR2(500) := &#39;SELECT &amp;quot;统计日期&amp;quot;, &amp;quot;员工&amp;quot;,&amp;quot;帐号&amp;quot;, &amp;quot;部门&amp;quot;,&amp;quot;部门编号&amp;quot;,&amp;quot;待解决任务数&amp;quot;,   &amp;quot;正在解决任务数&amp;quot;, &amp;quot;待解决的任务逾期天数合计&amp;quot;, &amp;quot;正在解决的任务逾期天数合计&amp;quot;,   &amp;quot;待解决的任务点数合计&amp;quot;, &amp;quot;待解决的任务工时合计&amp;quot;, &amp;quot;正在解决的任务点数合计&amp;quot;,   &amp;quot;正在解决的任务工时合计&amp;quot;, &amp;quot;正在解决的任务已花费工时合计&amp;quot;, &amp;quot;正在解决的任务完成百分比&amp;quot;,   &amp;quot;工作饱和状态&amp;quot; FROM v_staff_workstatus_today&#39;;  
          --初始的查询语句
     sqlWhereStr  VARCHAR2(500) :=&#39; &#39;;
     sqlOrderByStr  VARCHAR2(500) :=&#39; order by 部门编号,排序 DESC ,员工&#39;;
     doc xmlDom.DOMDocument := xmldom.newDOMDocument;        -- 创建文档对象
     main_node xmlDom.DOMNode := xmldom.makeNode(doc);       -- 获得文档节点
     root_elmt xmlDom.DOMElement:= xmldom.createElement(doc, &#39;统计数据&#39;);   -- 创建根元素
     --==================================================
     --以下定义元素
     dep_elmt xmlDom.DOMElement;      --定义部门元素
     person_elmt xmlDom.DOMElement;      --定义PERSON元素
     summary_elmt xmlDom.DOMElement;      --定义summary元素
     details_elmt xmlDom.DOMElement;      --定义details元素
     --==================================================
     --以下定义节点
     root_node xmlDom.DOMNode;   --定义统计数据节点
     dep_node xmlDom.DOMNode;   --定义部门节点
     person_node xmlDom.DOMNode;   --定义PERSON节点
     summary_node xmlDom.DOMNode;   --定义summary节点
     details_node xmlDom.DOMNode;   --定义details节点
     temp_node xmlDom.DOMNode;
     --统计数据变量
     v_point_min NUMBER :=0; --公司最低点
     v_point_max NUMBER :=0; --公司最高点
     v_point_avg NUMBER :=0; ----公司平均点数
     
     v_temp_dep varchar2(32) :=&#39;a&#39;;  --临时存放正在写入的人员的部门，主要是为了将同部门的人放到一块
BEGIN
     -- 向文档节点加入根节点:&amp;lt;统计数据&amp;gt;&amp;lt;/统计数据&amp;gt;
     root_node := xmldom.appendChild(main_node, xmldom.makeNode(root_elmt));
       --===========================================================================--
       summary_elmt := xmldom.createElement(doc, &#39;摘要&#39;); --创建摘要元素
       -- 向统计数据节点加入摘要节点&amp;lt;摘要&amp;gt;&amp;lt;/摘要&amp;gt;
       summary_node := xmldom.appendChild(root_node, xmldom.makeNode(summary_elmt));
       --===========================================================================--
       --向摘要节点加入下列属性
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;标题&#39;,&#39;今日员工工作饱和状态统计&#39;);
       --===========================================================================--
     --附加查询条件,准备得到统计明细数据
       --===========================================================================--
       details_elmt := xmldom.createElement(doc, &#39;统计明细&#39;); --创建摘要元素
       -- 向统计数据节点加入统计明细节点&amp;lt;统计明细&amp;gt;&amp;lt;/统计明细&amp;gt;
       details_node := xmldom.appendChild(root_node, xmldom.makeNode(details_elmt));
       --===========================================================================--   
     tempSql := tempSql||sqlWhereStr||sqlOrderByStr;
     --打开游标
     OPEN cur FOR tempSql;
     --遍历游标
     LOOP
       FETCH cur INTO personRow;
       EXIT WHEN cur%NOTFOUND;
       
       --写入部门节点
       if personRow.部门!=v_temp_dep then
           --===========================================================================--
           dep_elmt := xmldom.createElement(doc, &#39;部门&#39;); --创建部门元素
           -- 向部门元素加入部门节点
           dep_node := xmldom.appendChild(details_node, xmldom.makeNode(dep_elmt));
           xmlDom.SETATTRIBUTE(dep_elmt,&#39;name&#39;,personRow.部门);
           --===========================================================================--
            v_temp_dep:=personRow.部门;
       end if;
       
       --===========================================================================--
       person_elmt := xmldom.createElement(doc, &#39;员工&#39;); --创建PERSON元素
       -- 向PEOPLE节点加入PERSON节点&amp;lt;PERSON&amp;gt;&amp;lt;/PERSON&amp;gt;
       person_node := xmldom.appendChild(dep_node, xmldom.makeNode(person_elmt));
       --===========================================================================--
       --向PERSON节点加入属性下列属性
        xmlDom.SETATTRIBUTE(person_elmt,&#39;员工姓名&#39;,personRow.员工);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;帐号&#39;,personRow.帐号);     
        xmlDom.SETATTRIBUTE(person_elmt,&#39;待解决任务数&#39;,personRow.待解决任务数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决任务数&#39;,personRow.正在解决任务数);       
        xmlDom.SETATTRIBUTE(person_elmt,&#39;待解决的任务逾期天数合计&#39;,personRow.待解决的任务逾期天数合计);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决的任务逾期天数合计&#39;,personRow.正在解决的任务逾期天数合计);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;待解决的任务点数合计&#39;,personRow.待解决的任务点数合计);         
        xmlDom.SETATTRIBUTE(person_elmt,&#39;待解决的任务工时合计&#39;,personRow.待解决的任务工时合计);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决的任务点数合计&#39;,personRow.正在解决的任务点数合计);       
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决的任务工时合计&#39;,personRow.正在解决的任务工时合计);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决的任务已花费工时合计&#39;,personRow.正在解决的任务已花费工时合计);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;正在解决的任务完成百分比&#39;,personRow.正在解决的任务完成百分比);             
        xmlDom.SETATTRIBUTE(person_elmt,&#39;工作饱和状态&#39;,personRow.工作饱和状态);
     END LOOP;
     CLOSE cur;
     --写入硬盘
     xmlDom.writeToFile(doc,workload_file_30,&#39;UTF-8&#39;);
   EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END Pr_Xml_Staff_Status_Today ;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-利用job来调度该存储过程将任务平台项目数据统计生成为xml文件&#34;&gt;4、利用job来调度该存储过程将任务平台项目数据统计生成为xml文件&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE .Pr_Xml_Workload_By_Project IS
/******************************************************************************
利用job来调度该存储过程将任务平台项目数据统计生成为xml文件
作者：王峰
编写时间：2008-11-21
******************************************************************************/
     workload_file_30 VARCHAR2(128) :=&#39;D:\ere\dfgdfg\OA\StatDate\workload_file_30_project.xml&#39;;
     personRow V_WORKLOAD_BY_PROJECT30%ROWTYPE;      --获取游标的行变量
     TYPE person_cur IS REF CURSOR; --自定义REF游标
     cur person_cur;    
     tempSql VARCHAR2(500) := &#39;SELECT &amp;quot;项目名称&amp;quot;, &amp;quot;任务点数&amp;quot;, &amp;quot;任务个数&amp;quot;,   &amp;quot;逾期任务个数&amp;quot;, a类bug数, b类bug数,   c类bug数, d类bug数, e类bug数,   &amp;quot;工作量占比&amp;quot;, &amp;quot;单点BUG指数&amp;quot; FROM v_workload_by_project30 &#39;;  
          --初始的查询语句
     sqlWhereStr  VARCHAR2(500) :=&#39; &#39;;
     sqlOrderByStr  VARCHAR2(500) :=&#39; order by 任务点数 desc&#39;;
     v_currentProject VARCHAR2(128); --临时变量，存放当前项目
     
     CURSOR c1_personWorkload_In_project IS
        SELECT 员工姓名,任务点数, ROUND(任务点数*100/SUM(任务点数) OVER(PARTITION BY 项目名称 )) 贡献大小
        FROM
         (
          SELECT projectname 项目名称,STAFFNAME 员工姓名,      
             SUM(POINTNUMBERSOFTASK) 任务点数
          FROM .DW_FACT_WORKLOAD
          WHERE projectName=v_currentProject AND
                DATEID&amp;gt; TO_NUMBER(TO_CHAR(SYSDATE -30,&#39;YYYYMMDD&#39;))
          GROUP BY projectname,STAFFNAME
         )       
         ORDER BY 贡献大小 DESC;
     
     doc xmlDom.DOMDocument := xmldom.newDOMDocument;        -- 创建文档对象
     main_node xmlDom.DOMNode := xmldom.makeNode(doc);       -- 获得文档节点
     root_elmt xmlDom.DOMElement:= xmldom.createElement(doc, &#39;统计数据&#39;);   -- 创建根元素
     --==================================================
     --以下定义元素
     person_elmt xmlDom.DOMElement;      --定义PERSON元素
     summary_elmt xmlDom.DOMElement;      --定义summary元素
     details_elmt xmlDom.DOMElement;      --定义details元素
     details_person_elmt xmlDom.DOMElement;      --定义details_person_elmt元素
     --==================================================
     --以下定义节点
     root_node xmlDom.DOMNode;   --定义统计数据节点
     person_node xmlDom.DOMNode;   --定义PERSON节点
     summary_node xmlDom.DOMNode;   --定义summary节点
     details_node xmlDom.DOMNode;   --定义details节点
     details_person_node  xmlDom.DOMNode;   --定义员工节点
     temp_node xmlDom.DOMNode;
     --统计数据变量
     v_point_min NUMBER :=0; --公司最低点
     v_point_max NUMBER :=0; --公司最高点
     v_point_avg NUMBER :=0; ----公司平均点数
BEGIN
     -- 向文档节点加入根节点:&amp;lt;统计数据&amp;gt;&amp;lt;/统计数据&amp;gt;
     root_node := xmldom.appendChild(main_node, xmldom.makeNode(root_elmt));
       --===========================================================================--
       summary_elmt := xmldom.createElement(doc, &#39;摘要&#39;); --创建摘要元素
       -- 向统计数据节点加入摘要节点&amp;lt;摘要&amp;gt;&amp;lt;/摘要&amp;gt;
       summary_node := xmldom.appendChild(root_node, xmldom.makeNode(summary_elmt));
       --===========================================================================--
       --向摘要节点加入下列属性
        xmlDom.SETATTRIBUTE(summary_elmt,&#39;标题&#39;,&#39;最近一个月项目工作量统计&#39;);
       --===========================================================================--
     --附加查询条件,准备得到统计明细数据
       --===========================================================================--
       details_elmt := xmldom.createElement(doc, &#39;统计明细&#39;); --创建摘要元素
       -- 向统计数据节点加入统计明细节点&amp;lt;统计明细&amp;gt;&amp;lt;/统计明细&amp;gt;
       details_node := xmldom.appendChild(root_node, xmldom.makeNode(details_elmt));
       --===========================================================================--   
     tempSql := tempSql||sqlWhereStr||sqlOrderByStr;
     --打开游标
     OPEN cur FOR tempSql;
     --遍历游标
     LOOP
       FETCH cur INTO personRow;
       EXIT WHEN cur%NOTFOUND;
       --===========================================================================--
       person_elmt := xmldom.createElement(doc, &#39;项目&#39;); --创建PERSON元素
       -- 向PEOPLE节点加入PERSON节点&amp;lt;PERSON&amp;gt;&amp;lt;/PERSON&amp;gt;
       person_node := xmldom.appendChild(details_node, xmldom.makeNode(person_elmt));
       --===========================================================================--
       --向PERSON节点加入属性下列属性
        xmlDom.SETATTRIBUTE(person_elmt,&#39;项目名称&#39;,personRow.项目名称);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;任务点数&#39;,personRow.任务点数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;任务个数&#39;,personRow.任务个数);     
        xmlDom.SETATTRIBUTE(person_elmt,&#39;逾期任务个数&#39;,personRow.逾期任务个数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;A类BUG数&#39;,personRow.A类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;B类BUG数&#39;,personRow.B类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;C类BUG数&#39;,personRow.C类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;D类BUG数&#39;,personRow.D类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;E类BUG数&#39;,personRow.E类BUG数);
        xmlDom.SETATTRIBUTE(person_elmt,&#39;单点BUG指数&#39;,personRow.单点BUG指数);               
        xmlDom.SETATTRIBUTE(person_elmt,&#39;工作量占比&#39;,personRow.工作量占比);       
        
        v_currentProject :=personRow.项目名称;
        FOR c1_temp IN c1_personWorkload_In_project LOOP
            --===========================================================================--
            details_person_elmt := xmldom.createElement(doc, &#39;员工&#39;); --创建员工元素
            -- 向项目节点加入员工节点&amp;lt;员工&amp;gt;&amp;lt;/员工&amp;gt;
            details_person_node := xmldom.appendChild(person_node, xmldom.makeNode(details_person_elmt));
            
            xmlDom.SETATTRIBUTE(details_person_elmt,&#39;员工姓名&#39;,c1_temp.员工姓名);
            xmlDom.SETATTRIBUTE(details_person_elmt,&#39;任务点数&#39;,c1_temp.任务点数);
            xmlDom.SETATTRIBUTE(details_person_elmt,&#39;贡献大小&#39;,c1_temp.贡献大小);       
           --===========================================================================--      
        END LOOP;
                
     END LOOP;
     CLOSE cur;
     --写入硬盘
     xmlDom.writeToFile(doc,workload_file_30,&#39;UTF-8&#39;);
   EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END Pr_Xml_Workload_By_Project;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;5-任务平台利用存储相互过程发邮件&#34;&gt;5、任务平台利用存储相互过程发邮件&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE PROCEDURE .Pr_Mail_For_No_Worklod
/******************************************************************************
   NAME:       PR_MAIL_FOR_NO_WORKLOD
   PURPOSE:    由JOB每天早晨自动调用该过程给没有填写工作日志的用户发送电子邮件

CREATE OR REPLACE PROCEDURE Send_Mail(sender VARCHAR2,receiver VARCHAR2,subject VARCHAR2,contact VARCHAR2) IS
******************************************************************************/
IS 
    conn utl_smtp.connection;
    username VARCHAR2(256) := &#39;abff&#39;;
    PASSWORD VARCHAR2(256) := &#39;22223423423&#39;;
    yestdayIsHoliday VARCHAR2(4); --是否为节假日;
    
    CURSOR c1 IS SELECT &amp;quot;帐号&amp;quot;,&amp;quot;姓名&amp;quot; FROM V_WORKLOG_HOURS_STAT WHERE &amp;quot;工作小时&amp;quot; &amp;lt;4  OR &amp;quot;工作小时&amp;quot; &amp;gt;12;  --昨天日志没填写或工作时数异常的员工
    CURSOR c2 IS SELECT &amp;quot;帐号&amp;quot;,&amp;quot;姓名&amp;quot;,&amp;quot;日志天数&amp;quot; FROM V_WORKLOG_COUNT_LAST7 ;  --最近一周工作日志填写次数不够5天的员工统计（有可能是请假、忘记填写或出差了）
    V_ACCT VARCHAR2(20);
    V_NAME VARCHAR2(20);    
    V_NO_WORKLOG_NAMELIST VARCHAR2(4000):=&#39;&amp;lt;LI&amp;gt;&#39;||TO_CHAR(SYSDATE -1,&#39;YYYY-MM-DD&#39;)||&#39;日没有填写工作日志或填写时间少于4小时或大于12小时的员工有：&#39;||&#39;&amp;lt;BR/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&#39;;   
    
    mesg_body0 VARCHAR2(4000 CHAR) := &#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;任务平台日志填写提醒&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;BODY bgcolor=&amp;quot;#FFFFFF&amp;quot; LINK=&amp;quot;#000080&amp;quot;&amp;gt;&amp;lt;TABLE cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot; width=&amp;quot;100%&amp;quot;&amp;gt;&#39;;
    mesg_body1 VARCHAR2(30000 CHAR) := &#39;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&#39;;
    mesg_body2  VARCHAR2(200 CHAR):=&#39;&amp;lt;/font&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;;
    crlf          VARCHAR2(15) := &#39;&amp;lt;br/&amp;gt;&#39;;
    mesg          VARCHAR2(4000 CHAR);  
    
    PROCEDURE send_header(NAME IN VARCHAR2, HEADER IN VARCHAR2) AS
    DATA VARCHAR2(4000);
    BEGIN
        DATA := NAME || &#39;:&#39; || HEADER || utl_tcp.crlf;
        utl_smtp.write_raw_data(conn, utl_raw.cast_to_raw(DATA));
    END; 
BEGIN
    SELECT  isholiday INTO yestdayIsHoliday
    FROM DW_DIM_DATE 
    WHERE dateid = TO_NUMBER(TO_CHAR(SYSDATE -1,&#39;YYYYMMDD&#39;)) ;
    IF yestdayIsHoliday = &#39;否&#39; THEN
            FOR c1_rec IN c1 LOOP
               BEGIN
                    conn := utl_smtp.open_connection(&#39;mail.e-u.cn&#39;);
                    utl_smtp.EHLO(conn, &#39;mail.e-u.cn&#39;); 

                    --utl_smtp.command(conn, &#39;AUTH LOGIN&#39;);
                    --utl_smtp.command(conn, username);
                    --utl_smtp.command(conn, Demo_Base64.encode(utl_raw.cast_to_raw(PASSWORD)));
                    
                    utl_smtp.mail(conn, username||&#39;@e-u.cn&#39;);
                    V_ACCT:=c1_rec.&amp;quot;帐号&amp;quot;||&#39;@e-u.cn&#39;;
                    utl_smtp.rcpt(conn,V_ACCT );    
        
                    utl_smtp.open_data(conn);
                    send_header(&#39;From&#39;,username||&#39;@e-u.cn&#39;);
                    send_header(&#39;To&#39;,c1_rec.&amp;quot;帐号&amp;quot;||&#39;@e-u.cn&#39;);
                    --send_header(&#39;To&#39;,&#39;wangf@e-u.cn&#39;);
                    send_header(&#39;Subject&#39;,&#39;任务平台提醒：&#39;||c1_rec.&amp;quot;姓名&amp;quot;||&#39;，您前一个工作日（&#39;||TO_CHAR(SYSDATE -1,&#39;YYYY-MM-DD&#39;)||&#39;)忘了填写工作日志或填的不正确。&#39;);
                    send_header(&#39;Content-type&#39;,&#39;text/html; charset=gbk&#39;);
                    mesg :=&#39;&#39;|| mesg_body0 ||c1_rec.&amp;quot;姓名&amp;quot;||&#39;: &#39; || crlf || &#39;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;您好。&#39;||&#39;您昨天（&#39;||TO_CHAR(SYSDATE -1,&#39;YYYY-MM-DD&#39;)||&#39;)忘了填写工作日志或填的不正确（少于4小时或多于12小时）。&#39;||crlf;
                    mesg :=mesg|| &#39;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;请尽快补填!长城数字软件全体员工感谢您的支持与理解。&#39;||crlf;
                    mesg :=mesg|| &#39;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;a href=http://mail.e-u.cn:8880 target=_blank&amp;gt;进入任务平台填写工作日志&amp;lt;/a&amp;gt;&#39;;
                    mesg :=mesg|| mesg_body1|| &#39;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 卜海峰 &amp;amp;nbsp;&#39;||TO_CHAR(SYSDATE ,&#39;YYYY-MM-DD&#39;)||mesg_body2;
            
                    utl_smtp.write_raw_data(conn, utl_raw.cast_to_raw(utl_tcp.CRLF||mesg));
                    utl_smtp.close_data(conn);
                    utl_smtp.quit(conn);
                     DBMS_OUTPUT.PUT_LINE(c1_rec.&amp;quot;姓名&amp;quot;||&#39;-------发送成功！&#39;);
                    V_NO_WORKLOG_NAMELIST:=V_NO_WORKLOG_NAMELIST ||c1_rec.&amp;quot;姓名&amp;quot;||&#39;，&#39;;
                EXCEPTION
                         WHEN OTHERS THEN
                         DBMS_OUTPUT.PUT_LINE(c1_rec.&amp;quot;姓名&amp;quot;||SQLERRM);
                        -- utl_smtp.close_data(conn);
                         utl_smtp.rset(conn);
                         utl_smtp.quit(conn);                        
                END;
            END LOOP;
            V_NO_WORKLOG_NAMELIST := V_NO_WORKLOG_NAMELIST ||&#39;&amp;lt;BR/&amp;gt;&amp;lt;LI&amp;gt;最近一周工作日志填写次数不够5天的员工名单（有可能是请假、忘记填写或出差了）:&amp;lt;BR/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&#39;;
            FOR c2_rec IN c2 LOOP
               BEGIN
                    V_NO_WORKLOG_NAMELIST:=V_NO_WORKLOG_NAMELIST ||c2_rec.&amp;quot;姓名&amp;quot;||&#39;(缺&#39;||TO_CHAR(5 - c2_rec.&amp;quot;日志天数&amp;quot;)||&#39;天)，&#39;;
                EXCEPTION
                         WHEN OTHERS THEN
                         NULL;
                END;
            END LOOP;   
            --给管理人员发送日志填写有问题的人员名单
                conn := utl_smtp.open_connection(&#39;mail.eu3434.cn&#39;);
                utl_smtp.EHLO(conn, &#39;mail.e-u.cn&#39;);
                --utl_smtp.command(conn, &#39;AUTH LOGIN&#39;);
                --utl_smtp.command(conn, demo_base64.encode(utl_raw.cast_to_raw(username)));
                --utl_smtp.command(conn, demo_base64.encode(utl_raw.cast_to_raw(password)));
                
                utl_smtp.mail(conn, username||&#39;@e-u.cn&#39;);
                utl_smtp.rcpt(conn, &#39;m1@e-u.cn&#39;); 
                utl_smtp.rcpt(conn, &#39;m2@e-u.cn&#39;); 
                utl_smtp.rcpt(conn, &#39;m3@e-u.cn&#39;);    
                utl_smtp.rcpt(conn, &#39;m4@e-u.cn&#39;);                 
                utl_smtp.open_data(conn);
                send_header(&#39;From&#39;,username||&#39;@e-u.cn&#39;);
                send_header(&#39;To&#39;,&#39;m1@e-u.cn&#39;);
                send_header(&#39;To&#39;,&#39;m2@e-u.cn&#39;);
                send_header(&#39;To&#39;,&#39;m3@e-u.cn&#39;);
                send_header(&#39;To&#39;,&#39;m4@e-u.cn&#39;);                
                send_header(&#39;Subject&#39;,&#39;任务平台提醒：&#39;||&#39;前一个工作日（&#39;||TO_CHAR(SYSDATE -1,&#39;YYYY-MM-DD&#39;)||&#39;)忘了填写工作日志或填的不正确（少于4小时或多于12小时）的员工名单,请督促其尽快补填。&#39;);
                send_header(&#39;Content-type&#39;,&#39;text/html; charset=gbk&#39;);
                V_NO_WORKLOG_NAMELIST := V_NO_WORKLOG_NAMELIST ||&#39;&amp;lt;BR/&amp;gt;&amp;lt;BR/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;FONT COLOR=RED&amp;gt;注：如果有不用再提醒的用户，请告诉管理员！&amp;lt;/FONT&amp;gt;&#39;;
                utl_smtp.write_raw_data(conn, utl_raw.cast_to_raw(utl_tcp.CRLF||V_NO_WORKLOG_NAMELIST));
                utl_smtp.close_data(conn);
                utl_smtp.quit(conn);                    
    END IF; --节假日判断
    EXCEPTION 
        WHEN utl_smtp.transient_error OR utl_smtp.permanent_error THEN 
        BEGIN
             utl_smtp.quit(conn);   
            -- RAISE_APPLICATION_ERROR(-20000,&#39;Failed to send mail due to the following error: &#39; || SQLERRM);
        EXCEPTION
        WHEN utl_smtp.transient_error OR utl_smtp.permanent_error THEN
             utl_smtp.quit(conn);   
            -- RAISE_APPLICATION_ERROR(-20000,&#39;Failed to send mail due to the following error: &#39; || SQLERRM);
        END;
        WHEN OTHERS THEN
             utl_smtp.quit(conn);           
             RAISE_APPLICATION_ERROR(-20000,&#39;Failed to send mail due to the following error: &#39; || SQLERRM);
END Pr_Mail_For_No_Worklod;
/

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-工作量统计视图&#34;&gt;6、工作量统计视图&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP VIEW V_WORKLOAD_ALL;

/* Formatted on 2016/12/23 11:23:06 (QP5 v5.227.12220.39754) */
CREATE OR REPLACE FORCE VIEW V_WORKLOAD_ALL
(
   &amp;quot;员工姓名&amp;quot;,
   &amp;quot;简单页面数&amp;quot;,
   &amp;quot;普通页面数&amp;quot;,
   &amp;quot;复杂页面数&amp;quot;,
   &amp;quot;简单接口数&amp;quot;,
   &amp;quot;普通接口数&amp;quot;,
   &amp;quot;复杂接口数&amp;quot;,
   &amp;quot;任务个数&amp;quot;,
   &amp;quot;逾期任务个数&amp;quot;,
   &amp;quot;计划工时&amp;quot;,
   &amp;quot;实际工时&amp;quot;,
   &amp;quot;折算后编码工作点数&amp;quot;,
   &amp;quot;其它工作点数&amp;quot;,
   &amp;quot;合计点数&amp;quot;,
   &amp;quot;公司最低&amp;quot;,
   &amp;quot;公司最高&amp;quot;,
   &amp;quot;公司平均&amp;quot;,
   &amp;quot;排名&amp;quot;
)
AS
   SELECT 员工姓名,
          简单页面数,
          普通页面数,
          复杂页面数,
          简单接口数,
          普通接口数,
          复杂接口数,
          任务个数,
          逾期任务个数,
          计划工时,
          实际工时,
            简单页面数 * 1
          + 普通页面数 * 5
          + 复杂页面数 * 15
          + 简单接口数 * 1
          + 普通接口数 * 4
          + 复杂接口数 * 12
             折算后编码工作点数,
          任务点数 其它工作点数,
          (  任务点数
           + 简单页面数 * 1
           + 普通页面数 * 5
           + 复杂页面数 * 15
           + 简单接口数 * 1
           + 普通接口数 * 4
           + 复杂接口数 * 12)
             合计点数,
          MIN (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司最低,
          MAX (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司最高,
          AVG (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司平均,
          DENSE_RANK ()
          OVER (
             ORDER BY
                (  任务点数
                 + 简单页面数 * 1
                 + 普通页面数 * 5
                 + 复杂页面数 * 15
                 + 简单接口数 * 1
                 + 普通接口数 * 4
                 + 复杂接口数 * 12) DESC)
             排名
     FROM (  SELECT STAFFNAME 员工姓名,
                    SUM (POINTNUMBERSOFTASK) 任务点数,
                    SUM (NUMBEROFPAGE1) 简单页面数,
                    SUM (NUMBEROFPAGE2) 普通页面数,
                    SUM (NUMBEROFPAGE3) 复杂页面数,
                    SUM (UMBERSOFINTERFACE1) 简单接口数,
                    SUM (UMBERSOFINTERFACE2) 普通接口数,
                    SUM (UMBERSOFINTERFACE3) 复杂接口数,
                    SUM (NUMBERSOFALLTASK) 任务个数,
                    SUM (NUMBERSOFOVERDUETASK) 逾期任务个数,
                    SUM (HOURSFORPLAN) 计划工时,
                    SUM (HOURSOFFACT) 实际工时
               FROM .DW_FACT_WORKLOAD
           --WHERE DATEID&amp;gt; TO_NUMBER(TO_CHAR(SYSDATE -365,&#39;YYYYMMDD&#39;))
           GROUP BY STAFFNAME);


GRANT SELECT ON .V_WORKLOAD_ALL TO QUERY232;

GRANT SELECT ON .V_WORKLOAD_ALL TO PUBLIC;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;7-工作状态视图&#34;&gt;7、工作状态视图&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP VIEW .V_STAFF_WORKSTATUS_TODAY;

/* Formatted on 2016/12/23 11:25:31 (QP5 v5.227.12220.39754) */
CREATE OR REPLACE FORCE VIEW .V_STAFF_WORKSTATUS_TODAY
(
   &amp;quot;统计日期&amp;quot;,
   &amp;quot;员工&amp;quot;,
   &amp;quot;帐号&amp;quot;,
   &amp;quot;部门&amp;quot;,
   &amp;quot;部门编号&amp;quot;,
   &amp;quot;待解决任务数&amp;quot;,
   &amp;quot;正在解决任务数&amp;quot;,
   &amp;quot;待解决的任务逾期天数合计&amp;quot;,
   &amp;quot;正在解决的任务逾期天数合计&amp;quot;,
   &amp;quot;待解决的任务点数合计&amp;quot;,
   &amp;quot;待解决的任务工时合计&amp;quot;,
   &amp;quot;正在解决的任务点数合计&amp;quot;,
   &amp;quot;正在解决的任务工时合计&amp;quot;,
   &amp;quot;正在解决的任务已花费工时合计&amp;quot;,
   &amp;quot;正在解决的任务完成百分比&amp;quot;,
   &amp;quot;工作饱和状态&amp;quot;,
   &amp;quot;排序&amp;quot;
)
AS
   SELECT 统计日期,
          员工,
          帐号,
          部门,
          部门编号,
          待解决任务数,
          正在解决任务数,
          待解决的任务逾期天数合计,
          正在解决的任务逾期天数合计,
          待解决的任务点数合计,
          待解决的任务工时合计,
          正在解决的任务点数合计,
          正在解决的任务工时合计,
          正在解决的任务已花费工时合计,
          正在解决的任务完成百分比,
          NVL (b.msgtypename, 工作饱和状态) 工作饱和状态,
          排序
     FROM (SELECT TO_NUMBER (TO_CHAR (SYSDATE, &#39;YYYYMMDD&#39;)) 统计日期,
                  员工,
                  帐号,
                  部门,
                  部门编号,
                  待解决任务数,
                  正在解决任务数,
                  待解决的任务逾期天数合计,
                  正在解决的任务逾期天数合计,
                  待解决的任务点数合计,
                  NVL (待解决的任务工时合计, 0)
                     待解决的任务工时合计,
                  正在解决的任务点数合计,
                  NVL (正在解决的任务工时合计, 0)
                     正在解决的任务工时合计,
                  正在解决的任务已花费工时合计,
                  NVL (
                     (CASE
                         WHEN 正在解决的任务工时合计 = 0
                         THEN
                            0
                         ELSE
                            ROUND (
                                 100
                               * 正在解决的任务已花费工时合计
                               / 正在解决的任务工时合计)
                      END),
                     0)
                     正在解决的任务完成百分比,
                  (CASE
                      --WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;lt;1 THEN &#39;出差&#39;
                      --WHEN 帐号 = &#39;caoj&#39;
                      --THEN &#39;请假&#39;
                      WHEN 帐号 = &#39;zhangxm&#39; OR 部门 = &#39;精飞&#39;
                      THEN
                         &#39;正常&#39;
                      WHEN (   正在解决任务数 = 0
                            OR 最近的工作日志时间 &amp;lt; 1)
                      THEN
                         &#39;闲&#39;
                      WHEN     正在解决的任务工时合计 &amp;lt; 1
                           AND 最近的工作日志时间 &amp;gt; 1
                           AND 最近的工作日志时间 &amp;lt;= 2
                      THEN
                         &#39;较闲&#39;
                      WHEN (    正在解决的任务工时合计 &amp;gt;= 1
                            AND 正在解决的任务工时合计 &amp;lt;= 2)
                      THEN
                         &#39;正常&#39;
                      WHEN       正在解决的任务逾期天数合计
                               / 正在解决任务数 &amp;gt; 7
                           AND 最近的工作日志时间 &amp;lt;= 8
                      THEN
                         &#39;忙?&#39;
                      WHEN       正在解决的任务逾期天数合计
                               / 正在解决任务数 &amp;gt; 7
                           AND 最近的工作日志时间 &amp;gt; 8
                      THEN
                         &#39;忙&#39;
                      WHEN     正在解决的任务工时合计 &amp;gt; 8
                           AND 正在解决的任务工时合计 &amp;lt; 24
                      THEN
                         &#39;正常&#39;
                      ELSE
                         &#39;正常&#39;
                   END)
                     工作饱和状态,
                  (CASE
                      --WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;lt;1 THEN &#39;F&#39;
                      WHEN 最近的工作日志时间 &amp;lt; 1
                      THEN
                         &#39;F&#39;
                      WHEN     正在解决的任务工时合计 &amp;lt; 1
                           AND 最近的工作日志时间 &amp;gt; 1
                      THEN
                         &#39;A&#39;
                      WHEN (    正在解决的任务工时合计 &amp;gt; 0
                            AND 正在解决的任务工时合计 &amp;lt;= 8)
                      THEN
                         &#39;B&#39;
                      WHEN   正在解决的任务逾期天数合计
                           / 正在解决任务数 &amp;gt; 7
                      THEN
                         &#39;D&#39;
                      WHEN     正在解决的任务工时合计 &amp;gt; 8
                           AND 正在解决的任务工时合计 &amp;lt; 24
                      THEN
                         &#39;C&#39;
                      ELSE
                         &#39;E&#39;
                   END)
                     排序
             FROM (  SELECT assignee 员工,
                            empno 帐号,
                            depname 部门,
                            depno 部门编号,
                            SUM (CASE WHEN issuestatus = &#39;1&#39; THEN 1 ELSE 0 END)
                               待解决任务数,
                            SUM (CASE WHEN issuestatus = &#39;3&#39; THEN 1 ELSE 0 END)
                               正在解决任务数,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;1&#39; AND dueoverdays &amp;lt; 0
                                  THEN
                                     ABS (dueoverdays)
                                  ELSE
                                     0
                               END)
                               待解决的任务逾期天数合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;3&#39; AND dueoverdays &amp;lt; 0
                                  THEN
                                     ABS (dueoverdays)
                                  ELSE
                                     0
                               END)
                               正在解决的任务逾期天数合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;1&#39; THEN NVL (workload, 0)
                                  ELSE 0
                               END)
                               待解决的任务点数合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;1&#39; THEN workhours
                                  ELSE 0
                               END)
                               待解决的任务工时合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;3&#39; THEN NVL (workload, 0)
                                  ELSE 0
                               END)
                               正在解决的任务点数合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;3&#39; THEN workhours
                                  ELSE 0
                               END)
                               正在解决的任务工时合计,
                            SUM (
                               CASE
                                  WHEN issuestatus = &#39;3&#39;
                                  THEN
                                     NVL (花费工时, 0)
                                  ELSE
                                     0
                               END)
                               正在解决的任务已花费工时合计,
                            AVG (NVL (tm, 0)) 最近的工作日志时间
                       FROM (SELECT ID,
                                    pkey,
                                    gdsuser.empno,
                                    gdsuser.depname,
                                    gdsuser.depno,
                                    gdsuser.NAME assignee,
                                    project,
                                    issuetype,
                                    summary,
                                    issuestatus,
                                    created,
                                    duedate,
                                    NVL (ROUND ( (duedate - SYSDATE)), 0)
                                       dueoverdays,
                                    (SELECT numbervalue
                                       FROM customfieldvalue
                                      WHERE     customfieldvalue.issue =
                                                   issue.ID
                                            AND customfieldvalue.customfield =
                                                   10050)
                                       workload,
                                    ROUND (timeoriginalestimate / 3600)
                                       workhours,
                                    (SELECT 花费工时
                                       FROM (  SELECT issueid,
                                                      author,
                                                      ROUND (
                                                         SUM (timeworked) / 3600)
                                                         花费工时
                                                 FROM worklog
                                             GROUP BY issueid, author)
                                      WHERE     issueid = ID
                                            AND author = gdsuser.empno)
                                       花费工时,
                                    (SELECT tm
                                       FROM (  SELECT author,
                                                        ROUND (
                                                             SUM (timeworked)
                                                           / 3600)
                                                      / COUNT (
                                                           DISTINCT ROUND (
                                                                       startdate,
                                                                       &#39;DD&#39;))
                                                         tm
                                                 FROM worklog
                                                WHERE (SYSDATE - updated) &amp;lt; 5
                                             GROUP BY author)
                                      WHERE author = gdsuser.empno)
                                       tm
                               FROM issue, v_gds_user_from_hrmis gdsuser
                              WHERE     issue.assignee = gdsuser.empno
                                    AND issue.project &amp;lt;&amp;gt; 10010
                                    AND (   issue.issuestatus = &#39;1&#39;
                                         OR issue.issuestatus = &#39;3&#39;
                                         OR issue.issuestatus = &#39;4&#39;
                                         OR issue.issuestatus = &#39;8&#39;))
                   GROUP BY assignee,
                            depname,
                            depno,
                            empno)
            WHERE     &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;1020&#39;
                  AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;1040&#39;
                  AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;10998&#39;
                  AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;10999&#39;
           UNION
           SELECT TO_NUMBER (TO_CHAR (SYSDATE, &#39;YYYYMMDD&#39;)) 统计日期,
                  alluser.NAME,
                  alluser.empno,
                  alluser.depname,
                  alluser.depno,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  &#39;闲&#39;,
                  &#39;A&#39;
             FROM v_gds_user_from_hrmis alluser
            WHERE NOT EXISTS
                         (SELECT assignee
                            FROM issue
                           WHERE     project &amp;lt;&amp;gt; 10010
                                 AND (   issue.issuestatus = &#39;1&#39;
                                      OR issue.issuestatus = &#39;3&#39;
                                      OR issue.issuestatus = &#39;4&#39;
                                      OR issue.issuestatus = &#39;8&#39;)
                                 AND alluser.empno = assignee) --AND alluser.workertype = &#39;00000001&#39;
                                                              --AND (alluser.stationlevel &amp;lt;&amp;gt; &#39;00000001&#39;);
          ) a,
          (  SELECT employeeno, MAX (msgtypename) msgtypename
               FROM v_emp_out_stat
           GROUP BY employeeno) b
    WHERE     (a.帐号 IS NOT NULL)
          AND a.帐号 = b.employeeno(+)
          AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;1020&#39;
          AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;1040&#39;
          AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;10998&#39;
          AND &amp;quot;部门编号&amp;quot; &amp;lt;&amp;gt; &#39;10999&#39;

/*  ########张永平备份于2011-12-20  在改版的基础上增加了根据公司oa显示员工外出状态#########
SELECT TO_NUMBER(TO_CHAR(SYSDATE,&#39;YYYYMMDD&#39;)) 统计日期,员工,帐号,部门, 部门编号,
待解决任务数,
正在解决任务数,
待解决的任务逾期天数合计,
正在解决的任务逾期天数合计,
待解决的任务点数合计,
nvl(待解决的任务工时合计,0) 待解决的任务工时合计,
正在解决的任务点数合计,
nvl(正在解决的任务工时合计,0) 正在解决的任务工时合计,
正在解决的任务已花费工时合计,
nvl((CASE
 WHEN 正在解决的任务工时合计=0 THEN 0
 ELSE ROUND(100*正在解决的任务已花费工时合计/正在解决的任务工时合计) END),0) 正在解决的任务完成百分比,
(CASE
 --WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;lt;1 THEN &#39;出差&#39;
 WHEN 帐号 =&#39;caoj&#39; THEN  &#39;请假&#39;
 WHEN 最近的工作日志时间&amp;lt;1 THEN &#39;出差&#39;
 WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;gt;1 THEN &#39;闲&#39;
 WHEN (正在解决的任务工时合计&amp;gt;0 AND 正在解决的任务工时合计&amp;lt;=8) THEN &#39;较闲&#39;
 WHEN 正在解决的任务逾期天数合计/正在解决任务数&amp;gt;7 THEN &#39;忙?&#39;
 WHEN 正在解决的任务工时合计&amp;gt;8 AND 正在解决的任务工时合计&amp;lt;24 THEN &#39;正常&#39; ELSE &#39;忙&#39; END) 工作饱和状态,
(CASE
 --WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;lt;1 THEN &#39;F&#39;
 WHEN 最近的工作日志时间&amp;lt;1 THEN &#39;F&#39;
 WHEN 正在解决的任务工时合计&amp;lt;1 AND 最近的工作日志时间&amp;gt;1 THEN &#39;A&#39;
 WHEN (正在解决的任务工时合计&amp;gt;0 AND 正在解决的任务工时合计&amp;lt;=8) THEN &#39;B&#39;
 WHEN 正在解决的任务逾期天数合计/正在解决任务数&amp;gt;7 THEN &#39;D&#39;
 WHEN 正在解决的任务工时合计&amp;gt;8 AND 正在解决的任务工时合计&amp;lt;24 THEN &#39;C&#39; ELSE &#39;E&#39; END) 排序
FROM
(
SELECT assignee 员工,EMPNO 帐号,depname 部门,depno 部门编号,
SUM( CASE WHEN ISSUESTATUS=&#39;1&#39; THEN 1 ELSE 0 END) 待解决任务数,
SUM( CASE WHEN ISSUESTATUS=&#39;3&#39; THEN 1 ELSE 0 END) 正在解决任务数,
SUM( CASE WHEN ISSUESTATUS=&#39;1&#39; AND dueOverDays&amp;lt;0 THEN ABS(dueOverDays) ELSE 0 END) 待解决的任务逾期天数合计,
SUM( CASE WHEN ISSUESTATUS=&#39;3&#39; AND dueOverDays&amp;lt;0 THEN ABS(dueOverDays) ELSE 0 END) 正在解决的任务逾期天数合计,
SUM( CASE WHEN ISSUESTATUS=&#39;1&#39; THEN NVL(workload,0) ELSE 0 END) 待解决的任务点数合计,
SUM( CASE WHEN ISSUESTATUS=&#39;1&#39; THEN workHours ELSE 0 END) 待解决的任务工时合计,
SUM( CASE WHEN ISSUESTATUS=&#39;3&#39; THEN NVL(workload,0) ELSE 0 END) 正在解决的任务点数合计,
SUM( CASE WHEN ISSUESTATUS=&#39;3&#39; THEN workHours ELSE 0 END) 正在解决的任务工时合计,
SUM( CASE WHEN ISSUESTATUS=&#39;3&#39; THEN NVL(花费工时,0) ELSE 0 END) 正在解决的任务已花费工时合计,
SUM(NVL(tm,0)) 最近的工作日志时间
FROM
(
   SELECT ID, pkey, gdsuser.EMPNO,gdsuser.depname,gdsuser.depno, gdsuser.NAME assignee , PROJECT,   ISSUETYPE, SUMMARY, ISSUESTATUS,created, duedate,
       NVL(ROUND((duedate - SYSDATE)),0) dueOverDays ,
    (SELECT numbervalue FROM CUSTOMFIELDVALUE  WHERE CUSTOMFIELDVALUE.issue=ISSUE.ID AND CUSTOMFIELDVALUE.CUSTOMFIELD=10050) workload ,
    ROUND(timeoriginalestimate/3600) workHours,
    (SELECT 花费工时 FROM (SELECT issueid,author,ROUND(SUM(timeworked)/3600) 花费工时 FROM WORKLOG GROUP BY issueid,author) WHERE issueid=ID AND author=gdsuser.EMPNO) 花费工时,
 (SELECT tm FROM (SELECT author, ROUND(SUM(timeworked)/3600) tm FROM WORKLOG WHERE (SYSDATE -updated)&amp;lt;3 GROUP BY author) WHERE author=gdsuser.EMPNO) tm
   FROM ISSUE,v_gds_user_from_hrmis gdsuser
   WHERE  ISSUE.assignee = gdsuser.empno(+)
         AND ISSUE.PROJECT&amp;lt;&amp;gt;10010 AND  (ISSUE.ISSUESTATUS=&#39;1&#39; OR ISSUE.ISSUESTATUS=&#39;3&#39;)
      --AND gdsuser.workertype=&#39;00000001&#39;
      --AND (gdsuser.stationlevel &amp;lt;&amp;gt;&#39;00000001&#39;)
)
GROUP BY assignee,depname,depno,EMPNO
)
UNION
SELECT TO_NUMBER (TO_CHAR (SYSDATE, &#39;YYYYMMDD&#39;)) 统计日期, alluser.NAME,
          alluser.empno, alluser.depname, alluser.depno, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, &#39;闲&#39;, &#39;A&#39;
     FROM v_gds_user_from_hrmis alluser
    WHERE  NOT EXISTS (
             SELECT assignee
               FROM issue
              WHERE project &amp;lt;&amp;gt; 10010
                AND (issue.issuestatus = &#39;1&#39;
                     OR issue.issuestatus = &#39;3&#39;
                    ) AND alluser.empno=assignee)
      --AND alluser.workertype = &#39;00000001&#39;
      --AND (alluser.stationlevel &amp;lt;&amp;gt; &#39;00000001&#39;);

      */
;


GRANT SELECT ON .V_STAFF_WORKSTATUS_TODAY TO QUERY;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;8-最近30天工作量统计视图&#34;&gt;8、最近30天工作量统计视图&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP VIEW .V_WORKLOAD_LAST30DAY;

/* Formatted on 2016/12/23 11:29:11 (QP5 v5.227.12220.39754) */
CREATE OR REPLACE FORCE VIEW .V_WORKLOAD_LAST30DAY
(
   &amp;quot;员工姓名&amp;quot;,
   &amp;quot;简单页面数&amp;quot;,
   &amp;quot;普通页面数&amp;quot;,
   &amp;quot;复杂页面数&amp;quot;,
   &amp;quot;简单接口数&amp;quot;,
   &amp;quot;普通接口数&amp;quot;,
   &amp;quot;复杂接口数&amp;quot;,
   &amp;quot;任务个数&amp;quot;,
   &amp;quot;逾期任务个数&amp;quot;,
   &amp;quot;计划工时&amp;quot;,
   &amp;quot;实际工时&amp;quot;,
   &amp;quot;折算后编码工作点数&amp;quot;,
   &amp;quot;其它工作点数&amp;quot;,
   &amp;quot;公司最低&amp;quot;,
   &amp;quot;公司最高&amp;quot;,
   &amp;quot;公司平均&amp;quot;,
   &amp;quot;A类BUG数&amp;quot;,
   &amp;quot;B类BUG数&amp;quot;,
   &amp;quot;C类BUG数&amp;quot;,
   &amp;quot;D类BUG数&amp;quot;,
   &amp;quot;E类BUG数&amp;quot;,
   &amp;quot;应得点数&amp;quot;,
   &amp;quot;扣除点数&amp;quot;,
   &amp;quot;合计点数&amp;quot;,
   &amp;quot;排名&amp;quot;
)
AS
   SELECT 员工姓名,
          简单页面数,
          普通页面数,
          复杂页面数,
          简单接口数,
          普通接口数,
          复杂接口数,
          任务个数,
          逾期任务个数,
          计划工时,
          实际工时,
            简单页面数 * 1
          + 普通页面数 * 5
          + 复杂页面数 * 15
          + 简单接口数 * 1
          + 普通接口数 * 4
          + 复杂接口数 * 12
             折算后编码工作点数,
          任务点数 其它工作点数,
          MIN (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司最低,
          MAX (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司最高,
          AVG (
             (  任务点数
              + 简单页面数 * 1
              + 普通页面数 * 5
              + 复杂页面数 * 15
              + 简单接口数 * 1
              + 普通接口数 * 4
              + 复杂接口数 * 12))
          OVER ()
             公司平均,
          NVL (A类BUG数, 0) A类BUG数,
          NVL (B类BUG数, 0) B类BUG数,
          NVL (C类BUG数, 0) C类BUG数,
          NVL (D类BUG数, 0) D类BUG数,
          NVL (E类BUG数, 0) E类BUG数,
          (  任务点数
           + 简单页面数 * 1
           + 普通页面数 * 5
           + 复杂页面数 * 15
           + 简单接口数 * 1
           + 普通接口数 * 4
           + 复杂接口数 * 12)
             应得点数,
          (  NVL (A类BUG数, 0) * 10
           + NVL (B类BUG数, 0) * 8
           + NVL (C类BUG数, 0) * 6
           + NVL (D类BUG数, 0) * 4
           + NVL (E类BUG数, 0) * 0)
             扣除点数,
          (  任务点数
           + 简单页面数 * 1
           + 普通页面数 * 5
           + 复杂页面数 * 15
           + 简单接口数 * 1
           + 普通接口数 * 4
           + 复杂接口数 * 12
           - NVL (A类BUG数, 0) * 10
           - NVL (B类BUG数, 0) * 8
           - NVL (C类BUG数, 0) * 6
           - NVL (D类BUG数, 0) * 4
           - NVL (E类BUG数, 0) * 0)
             合计点数,
          DENSE_RANK ()
          OVER (
             ORDER BY
                (  任务点数
                 + 简单页面数 * 1
                 + 普通页面数 * 5
                 + 复杂页面数 * 15
                 + 简单接口数 * 1
                 + 普通接口数 * 4
                 + 复杂接口数 * 12
                 - NVL (A类BUG数, 0) * 10
                 - NVL (B类BUG数, 0) * 8
                 - NVL (C类BUG数, 0) * 6
                 - NVL (D类BUG数, 0) * 4
                 - NVL (E类BUG数, 0) * 0) DESC)
             排名
     FROM (  SELECT STAFFNAME 员工姓名,
                    SUM (POINTNUMBERSOFTASK) 任务点数,
                    SUM (NUMBEROFPAGE1) 简单页面数,
                    SUM (NUMBEROFPAGE2) 普通页面数,
                    SUM (NUMBEROFPAGE3) 复杂页面数,
                    SUM (UMBERSOFINTERFACE1) 简单接口数,
                    SUM (UMBERSOFINTERFACE2) 普通接口数,
                    SUM (UMBERSOFINTERFACE3) 复杂接口数,
                    SUM (NUMBERSOFALLTASK) 任务个数,
                    SUM (NUMBERSOFOVERDUETASK) 逾期任务个数,
                    SUM (HOURSFORPLAN) 计划工时,
                    SUM (HOURSOFFACT) 实际工时
               FROM .DW_FACT_WORKLOAD, v_gds_user_from_hrmis gdsuser
              WHERE     DW_FACT_WORKLOAD.STAFFNAME = gdsuser.NAME
                    AND gdsuser.workertype = &#39;00000001&#39;
                    AND (   gdsuser.stationlevel = &#39;00000003&#39;
                         OR gdsuser.stationlevel = &#39;00000004&#39;)
                    AND DW_FACT_WORKLOAD.DATEID &amp;gt;
                           TO_NUMBER (TO_CHAR (SYSDATE - 30, &#39;YYYYMMDD&#39;))
           GROUP BY STAFFNAME) aaa,
          (  SELECT staffname,
                    SUM (CASE WHEN bugtype = &#39;A类&#39; THEN bugnum ELSE 0 END)
                       A类BUG数,
                    SUM (CASE WHEN bugtype = &#39;B类&#39; THEN bugnum ELSE 0 END)
                       B类BUG数,
                    SUM (CASE WHEN bugtype = &#39;C类&#39; THEN bugnum ELSE 0 END)
                       C类BUG数,
                    SUM (CASE WHEN bugtype = &#39;D类&#39; THEN bugnum ELSE 0 END)
                       D类BUG数,
                    SUM (CASE WHEN bugtype = &#39;E类&#39; THEN bugnum ELSE 0 END)
                       E类BUG数
               FROM (  SELECT staffname, bugtype, SUM (bugnum) bugnum
                         FROM .DW_FACT_BUG, v_gds_user_from_hrmis gdsuser
                        WHERE     DW_FACT_BUG.staffname = gdsuser.NAME
                              AND gdsuser.workertype = &#39;00000001&#39;
                              AND (   gdsuser.stationlevel = &#39;00000003&#39;
                                   OR gdsuser.stationlevel = &#39;00000004&#39;)
                              AND DW_FACT_BUG.DATEID &amp;gt;
                                     TO_NUMBER (
                                        TO_CHAR (SYSDATE - 30, &#39;YYYYMMDD&#39;))
                     GROUP BY STAFFNAME, bugtype)
           GROUP BY STAFFNAME) bbb
    WHERE aaa.员工姓名 = bbb.STAFFNAME(+);


GRANT SELECT ON .V_WORKLOAD_LAST30DAY TO QUERY;

GRANT SELECT ON .V_WORKLOAD_LAST30DAY TO PUBLIC;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;9-java存储过程-用来调用os命令&#34;&gt;9、java存储过程，用来调用os命令&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP JAVA SOURCE .&amp;quot;OSCommand&amp;quot;;

CREATE OR REPLACE AND RESOLVE JAVA SOURCE NAMED .&amp;quot;OSCommand&amp;quot; as import java.io.*;
public class OSCommand{
  public static String Run(String Command){
     try{
        Runtime.getRuntime().exec(new String(Command.getBytes(&amp;quot;GBK&amp;quot;),&amp;quot;ISO-8859-1&amp;quot;));
        return(&amp;quot;0&amp;quot;);
     }
     catch (Exception e){
        System.out.println(&amp;quot;Error running command: &amp;quot; + Command +
                                 &amp;quot;\n&amp;quot; + e.getMessage());
        return(e.getMessage());
     }
  }
}

/

CREATE OR REPLACE FUNCTION .OSCommand_Run(Command IN STRING)                      
RETURN VARCHAR2 IS                                                               
LANGUAGE JAVA                                                                    
NAME &#39;OSCommand.Run(java.lang.String) return int&#39;;
/


&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;10-计算日器的函数&#34;&gt;10、计算日器的函数&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE FUNCTION .F_Getlunar_Date(i_SolarDay DATE) 
RETURN DATE
  -- 功能：计算阳历1900/01/31 - 2050/01/22间某一天对应的阴历是多少
  -- 算法：在一张表中用10进制格式保存某个农历年每月大小,有无闰月,闰月大小信息
  --           1.用12个2进制位来表示某个农历年每月的大小，大月记为1，否则为0
  --           2.用低4位来表示闰月的月份，没有闰月记为0
  --           3.用一个高位表示闰月的大小，闰月大记为0，闰月小或无闰月记为0
  --           4.再将该2进制数转化为10进制，存入表中
  --       农历2000年: 0 110010010110 0000 -&amp;gt; 0x0c960 -&amp;gt; 51552
  --       农历2001年: 0 110110010101 0100 -&amp;gt; 0x0d954 -&amp;gt; 55636
  --       采用查表的方式计算出农历日期
  -- 作者：Angel_XJW 
  -- 修改：1.
  --       2.
AS
  v_OffSet         INT;
  v_Lunar          INT;          -- 农历年是否含闰月,几月是闰月,闰月天数,其它月天数
  v_YearDays       INT;          -- 农历年所含天数
  v_MonthDays      INT;          -- 农历月所含天数
  v_LeapMonthDays  INT;          -- 农历闰月所含天数
  v_LeapMonth      INT;          -- 农历年闰哪个月 1-12 , 没闰传回 0
  v_LeapFlag       INT;          -- 某农历月是否为闰月  1:是  0:不是
  v_MonthNo        INT;          -- 某农历月所对应的2进制数 如农历3月: 001000000000 
  i                INT;
  j                INT; 
  k                INT;

  v_Year           INT;          -- i_SolarDay 对应的农历年
  v_Month          INT;          -- i_SolarDay 对应的农历月
  v_Day            INT;          -- i_SolarDay 对应的农历日
  
  o_OutputDate     VARCHAR2(25); -- 返回值  格式：农历 ****年 **(闰)月 **日
  
  e_ErrMsg         VARCHAR2(200);
  e_ErrDate        EXCEPTION;
BEGIN

   --输入参数判断
   IF i_SolarDay&amp;lt;TO_DATE(&#39;1900-01-31&#39;,&#39;YYYY-MM-DD&#39;) OR i_SolarDay&amp;gt;=TO_DATE(&#39;2050-01-23&#39;,&#39;YYYY-MM-DD&#39;) THEN
     RAISE e_ErrDate;
   END IF ;

  -- i_SolarDay 到 1900-01-30(即农历1900-01-01的前一天) 的天数
  v_OffSet := TRUNC(i_SolarDay, &#39;DD&#39;) - TO_DATE(&#39;1900-01-30&#39;, &#39;YYYY-MM-DD&#39;);

  -- 确定农历年开始
  i := 1900;
  WHILE i &amp;lt; 2050 AND v_OffSet &amp;gt; 0 LOOP
    v_YearDays := 348;    --  29*12 以每年12个农历月,每个农历月含29个农历日为基数
    v_LeapMonthDays := 0;
    
    -- 取出农历年是否含闰月,几月是闰月,闰月天数,其它月天数
    -- 如农历2001年: 0x0d954(16进制) -&amp;gt; 55636(10进制) -&amp;gt; 0 110110010101 0100(2进制)
    -- 1,2,4,5,8,10,12月大, 3,6,7,9,11月小, 4月为闰月，闰月小
    SELECT DataInt INTO v_Lunar FROM SOLARDATA WHERE YearId = i;

    -- 传回农历年的总天数
    j := 32768;            --   100000000000 0000 -&amp;gt; 32768
                           -- 0 110110010101 0100 -&amp;gt; 55636(农历2001年)
    -- 依次判断v_Lunar年个月是否为大月，是则加一天 
    WHILE j &amp;gt; 8 LOOP       -- 闰月另行判断 8 -&amp;gt; 0 000000000000 1000    
      IF BITAND(v_Lunar, j) + 0 &amp;gt; 0 THEN
        v_YearDays := v_YearDays + 1;
      END IF;
      j := j/2;            -- 判断下一个月是否为大
    END LOOP;

    -- 传回农历年闰哪个月 1-12 , 没闰传回 0   15 -&amp;gt; 1 0000
    v_LeapMonth := BITAND(v_Lunar, 15) + 0;

    -- 传回农历年闰月的天数 ,加在年的总天数上
    IF v_LeapMonth &amp;gt; 0 THEN
      -- 判断闰月大小 65536 -&amp;gt; 1 000000000000 0000 
      IF BITAND(v_Lunar, 65536)+0 &amp;gt; 0 THEN
        v_LeapMonthDays := 30;
      ELSE
        v_LeapMonthDays := 29;
      END IF;
      v_YearDays := v_YearDays + v_LeapMonthDays;
    END IF;

    v_OffSet := v_OffSet - v_YearDays;
    i := i + 1;
  END LOOP;

  IF v_OffSet &amp;lt;= 0 THEN
    -- i_SolarDay 在所属农历年(即i年)中的第 v_OffSet 天 
    v_OffSet := v_OffSet + v_YearDays;  
    i := i - 1;
  END IF;
  -- 确定农历年结束
  v_Year := i;

  -- 确定农历月开始
  i := 1;
  SELECT DataInt INTO v_Lunar FROM SOLARDATA WHERE YearId = v_Year; 

  -- 判断那个月是润月
  -- 如农历2001年 (55636,15 -&amp;gt; 0 1101100101010100, 1111 -&amp;gt; 4) 即润4月,且闰月小
  v_LeapMonth := BITAND(v_Lunar, 15) + 0; 
  v_LeapFlag := 0;

  WHILE i &amp;lt; 13 AND v_OffSet &amp;gt; 0 LOOP
    -- 判断是否为闰月
    v_MonthDays := 0;
    IF (v_LeapMonth &amp;gt; 0 AND i = (v_LeapMonth + 1) AND v_LeapFlag = 0) THEN
      -- 是闰月
      i := i - 1;
      k := i;                -- 保存是闰月的时i的值
      v_LeapFlag := 1;
      -- 传回农历年闰月的天数
      IF BITAND(v_Lunar, 65536)+0 &amp;gt; 0 THEN
        v_MonthDays := 30;
      ELSE
        v_MonthDays := 29;
      END IF;
      
    ELSE
      -- 不是闰月
      j := 1;
      v_MonthNo := 65536;
      -- 计算 i 月对应的2进制数 如农历3月: 001000000000
      WHILE j&amp;lt;= i LOOP
        v_MonthNo := v_MonthNo/2;
        j := j + 1;
      END LOOP;
      -- 计算农历 v_Year 年 i 月的天数
      IF BITAND(v_Lunar, v_MonthNo)+0 &amp;gt; 0 THEN
        v_MonthDays := 30;
      ELSE
        v_MonthDays := 29;
      END IF;
    END IF;

    -- 解除闰月
    IF v_LeapFlag = 1 AND i = v_LeapMonth +1 THEN
      v_LeapFlag := 0;
    END IF;
    v_OffSet := v_OffSet - v_MonthDays;
    i := i + 1;
  END LOOP;

  IF v_OffSet &amp;lt;= 0 THEN
    -- i_SolarDay 在所属农历月(即i月)中的第 v_OffSet 天 
    v_OffSet := v_OffSet + v_MonthDays;
    i := i - 1;
  END IF;

  -- 确定农历月结束
  v_Month := i;

  -- 确定农历日结束
  v_Day := v_OffSet;

  -- 格式化返回值
--   o_OutputDate := &#39;农历 &#39;||TO_CHAR(v_Year)||&#39;年 &#39;;
--   IF k = i THEN
--      o_OutputDate := o_OutputDate || LPAD(TO_CHAR(v_Month), 2, &#39;0&#39;)||&#39;(润)月 &#39;;
--   ELSE
--      o_OutputDate := o_OutputDate || LPAD(TO_CHAR(v_Month), 2, &#39;0&#39;)||&#39;月 &#39;;
--   END IF;
--   o_OutputDate := o_OutputDate || LPAD(TO_CHAR(v_Day), 2, &#39;0&#39;)||&#39;日&#39;;
  o_OutputDate :=TO_CHAR(v_Year)||&#39;-&#39;|| LPAD(TO_CHAR(v_Month), 2, &#39;0&#39;)||&#39;-&#39;|| LPAD(TO_CHAR(v_Day), 2, &#39;0&#39;);
  
       BEGIN
            RETURN TO_DATE(o_OutputDate,&#39;YYYY-MM-DD&#39;);
       EXCEPTION
          WHEN OTHERS THEN
             RETURN TO_DATE(TO_CHAR(v_Year)||&#39;-&#39;|| LPAD(TO_CHAR(v_Month), 2, &#39;0&#39;)||&#39;-28&#39;,&#39;YYYY-MM-DD&#39;);
       END;
  
 
  
EXCEPTION
  WHEN e_Errdate THEN
    RETURN &#39;日期错误! 有效范围(阳历): 1900/01/31 - 2050/01/22&#39;;
  WHEN OTHERS THEN
    e_ErrMsg :=SUBSTR(SQLERRM,1,200);
    RETURN e_ErrMsg;
END;
/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;11-md5加密函数&#34;&gt;11、MD5加密函数&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE FUNCTION .Md5( input VARCHAR2 ) RETURN sys.dbms_obfuscation_toolkit.varchar2_checksum AS
BEGIN 
  RETURN utl_raw.cast_to_raw(dbms_obfuscation_toolkit.Md5(input_string=&amp;gt;utl_raw.cast_to_raw(input)));
END;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;12-dblink的创建&#34;&gt;12、DBLINK的创建&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP PUBLIC DATABASE LINK &amp;quot;QUERYFORSHARE.US.ORACLE.COM&amp;quot;;

CREATE PUBLIC DATABASE LINK &amp;quot;QUERYFORSHARE.US.ORACLE.COM&amp;quot;
 CONNECT TO QUERY
 IDENTIFIED BY &amp;lt;PWD&amp;gt;
 USING &#39;(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.100.2.2)(PORT = 1521)) ) (CONNECT_DATA = (SERVICE_NAME = testrep) ) )&#39;;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用豆瓣镜像站点加速pip安装python软件包的方法</title>
      <link>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8%E8%B1%86%E7%93%A3%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85python%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 22 Dec 2016 13:55:34 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8%E8%B1%86%E7%93%A3%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85python%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;1-创建一个pip-ini文本文件-windows下放到-pip-目录下-linux下放到-pip-目录下&#34;&gt;1、创建一个pip.ini文本文件，windows下放到~\pip\目录下，Linux下放到~/.pip/目录下&lt;/h3&gt;

&lt;h3 id=&#34;2-修改文件内容如下&#34;&gt;2、修改文件内容如下：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[global] 
timeout = 6000
index-url = https://pypi.douban.com/simple
[install]
use-mirrors = true
mirrors = http://e.pypi.python.org
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用http://tool.chinaz.com/dns查找加速github.com访问速度的方法</title>
      <link>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8http/tool.chinaz.com/dns%E6%9F%A5%E6%89%BE%E5%8A%A0%E9%80%9Fgithub.com%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 22 Dec 2016 13:41:05 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8http/tool.chinaz.com/dns%E6%9F%A5%E6%89%BE%E5%8A%A0%E9%80%9Fgithub.com%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h1 id=&#34;为什么慢-github的cdn被某墙屏了&#34;&gt;为什么慢？github的CDN被某墙屏了。&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;有vpn服务的可以直接使用vpn，没有vpn的，可以绕过dns解析，在本地直接绑定host。方法如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;打开dns查询工具网站：&lt;a href=&#34;http://tool.chinaz.com/dns&#34;&gt;http://tool.chinaz.com/dns&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查询域名解析如下：
……&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选取一个TTL值最小的ip，直接绑定到hosts文件便可解决，比如我选取第一个ip，绑定域名如下
&lt;code&gt;103.245.222.133 assets-cdn.github.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多刷几下，访问速度就一切正常了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;域名映射：（主要是第一个）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;103.245.222.249 github.global.ssl.fastly.net
103.245.222.133 assets-cdn.github.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;瞬间从打死也就20K提速到100K左右，最高能达到200多K，低时也有50K。（具体速度和个人网络环境有关，反正快了好几倍）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;以下来源于网络：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;github.com 上有两种源码获取方式，一是 git clone，一是直接下载 master.zip，后者明显速度快于前者，可以考虑；&lt;/li&gt;
&lt;li&gt;1）用 proxychains 这类透明代理，间接走系统中运行的代理工具中转；&lt;/li&gt;
&lt;li&gt;2）用 git 内置代理，直接走系统中运行的代理工具中转，比如，你的 SS 本地端口是 1080，那么可以如下方式走代理&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git config --global http.proxy socks5://127.0.0.1:1080
git config --global https.proxy socks5://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以如下方式停走代理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global http.proxy &amp;quot;&amp;quot;
git config --global https.proxy &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;也可以试试这个站点&#34;&gt;也可以试试这个站点&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://asm.ca.com/zh_cn/ping.php&#34;&gt;https://asm.ca.com/zh_cn/ping.php&lt;/a&gt;
  例如：为了加速github访问速度，我修改我的hosts文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;151.101.56.133 ten2net.github.io
23.235.33.133 github.io
192.30.253.112 github.com
192.30.253.113 github.com
151.101.56.133 assets-cdn.github.com
151.101.56.249 github.global.ssl.fastly.net
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用Pandoc工具转换ms word文件为Markdown格式</title>
      <link>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8pandoc%E5%B7%A5%E5%85%B7%E8%BD%AC%E6%8D%A2ms-word%E6%96%87%E4%BB%B6%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Thu, 22 Dec 2016 12:59:30 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8pandoc%E5%B7%A5%E5%85%B7%E8%BD%AC%E6%8D%A2ms-word%E6%96%87%E4%BB%B6%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</guid>
      <description>

&lt;h1 id=&#34;markdown-pandoc-最佳写作拍档&#34;&gt;Markdown+Pandoc 最佳写作拍档&lt;/h1&gt;

&lt;h3 id=&#34;我们为什么写作&#34;&gt;我们为什么写作？&lt;/h3&gt;

&lt;p&gt;自从人们开始写作，写作便是记录、抒发、批判、反省的好工具。从石板上的刻印到笔墨纸砚，再到如今的信息时代。从静态的个人主页到托管博客，从个人博客到微博，从wordpress到jekyll。无数投入写作中的人们写作的目的大同，写作的方式越简单越好，这样才能让我们专注于写作而不是为其他格式所困扰。另外现在智能终端快速普及，文件格式的多平台使用也成为了写作的一大问题。&lt;/p&gt;

&lt;p&gt;为了更好的写作,今天介绍的 Markdown &amp;amp; Pandoc 便能提供完美的辅助。&lt;/p&gt;

&lt;h3 id=&#34;markdown的用法&#34;&gt;Markdown的用法&lt;/h3&gt;

&lt;h4 id=&#34;1-markdown是什么&#34;&gt;1 .Markdown是什么?&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 &lt;a href=&#34;https://zh.wikipedia.org/wiki/Markdown&#34;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;2-为什么要用markdown&#34;&gt;2 .为什么要用Markdown?&lt;/h4&gt;

&lt;p&gt;windows下常用的编辑工具是word,mac上常用的编辑工具是page,linux上常用的编辑工具就是vim了，一份文章编辑完后为了要在不同平台中保存完整的模样时就必需同时准备多种文本格式的文件，这是多么痛苦的一件事。我们写作的初衷是为了写作呀，反而被这些格式烦恼。所以我们要用Markdown,它让你关注内容，格式怎么显示不是要你在写得时候关注的。而在写Markdown时你只需要用一个纯文本的方式进行，不用担心平台与格式的困扰。&lt;/p&gt;

&lt;h4 id=&#34;3-markdown的语法&#34;&gt;3 .Markdown的语法&lt;/h4&gt;

&lt;p&gt;Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最常用格式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 空一行（两个回车）分段
 行末加两个或多个空格才是真正的换行，否则正常的一个回车就像在 HTML 代码中一样，被当作空格处理
 插入链接：  [链接文字](url) 
 图片跟链接很像，在前面加个叹号：![alt 文字](图片 URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;列表&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 无序(没有编号的)列表中的一项
* 一个子项，要以一个制表符或者4个空格缩进
* 无序列表中的另一个项
1. 有序(排好序，有编号的)列表中的一项
2. 有序列表中的另一个项
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 一级标题

#### 四级标题

一级标题
===================

二级标题
--------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;代码可以采取两种方法：&lt;/p&gt;

&lt;p&gt;一是用（`）将代码包起来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;夹杂着`一些代码`的文字内容,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二是在代码块前面加上4个空格或者一个TAB&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import random

    class CardGame(object):
        &amp;quot;&amp;quot;&amp;quot; a sample python class &amp;quot;&amp;quot;&amp;quot;
        NB_CARDS = 32
        def __init__(self, cards=5):
            self.cards = random.sample(range(self.NB_CARDS), 5)
            print &#39;ready to play&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码高亮可以由github提供的js实现&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分割线&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要生成水平分割线，可以在单独一行里输入3个或以上的短横线、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分割线。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;===========
************
_ _ _ _ _
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown的常用语法差不多就是这些了，详细的介绍请参考&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdowm 语法说明&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-markdown的常用编辑工具&#34;&gt;4 .Markdown的常用编辑工具&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Mac等平台下推荐&lt;a href=&#34;http://mouapp.com/&#34;&gt;Mou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows平台推荐&lt;a href=&#34;http://markdownpad.com/&#34;&gt;MarkdownPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;编辑器是我的最爱，并且它是跨平台的，结合&lt;a href=&#34;https://github.com/revolunet/sublimetext-markdown-preview&#34;&gt;Markdown preview&lt;/a&gt;插件能更好的编辑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here&#34;&gt;markdown-here&lt;/a&gt;借助Chrome插件，将gmail、Evernote、Hotmail等写作窗口变为Markdown在线写作窗口&lt;/li&gt;
&lt;li&gt;web版推荐国人&lt;a href=&#34;http://jser.me/&#34;&gt;草依山&lt;/a&gt;写的&lt;a href=&#34;http://mahua.jser.me&#34;&gt;MaHua&lt;/a&gt;,支持vim快捷键和多种主题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Markdown越来越流行，不是因为它复杂，而是因为它足够简单。尝试过MD后就能体会到单纯的写作带来的快乐，一般Markdown文件保存格式都是以md、mdownx现实。为了文档的分享,多平台的使用，需要对MD进行格式转化。这是就更体现了它的方便之处，它是本身是一个结构标记语言，能对多种格式文档进行转换，这里介绍一款强大的格式转换工具 &lt;strong&gt;Pandoc&lt;/strong&gt; 。&lt;/p&gt;

&lt;h3 id=&#34;pandoc-格式转换的瑞士军刀&#34;&gt;Pandoc 格式转换的瑞士军刀&lt;/h3&gt;

&lt;h4 id=&#34;1-pandoc的介绍&#34;&gt;1 .Pandoc的介绍&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Pandoc是一个用于从一种标记格式转换为另一种的Haskell库，它的功能是在多种常见的标记语言进行相互转换。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中包括 Markdown, reStructuredText, Textilte, HTML, PDF,LaTeX 等。利用它，你可以用简单的 Markdown 语法生成pdf文档，还可以写 Beamer 演示文稿。更强大的是，它还能将以上提到的这些语言所写文件转换成 xdoc 文档。下面这张图展示了 Pandoc 让人吃惊 的功能集，不愧为文件转换中的瑞士军刀：&lt;/p&gt;

&lt;h4 id=&#34;2-pandoc的用法&#34;&gt;2 .Pandoc的用法&lt;/h4&gt;

&lt;h5 id=&#34;2-1-web版pandoc&#34;&gt;2.1 Web版Pandoc&lt;/h5&gt;

&lt;p&gt;首先我们可以看下Pandoc的官网 &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;http://johnmacfarlane.net/pandoc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在介绍中我们知道Pandoc支持linux,Mac OS,Win多平台，还有简易的web版提供我们在线转换格式。打开web版 &lt;a href=&#34;http://johnmacfarlane.net/pandoc/try&#34;&gt;http://johnmacfarlane.net/pandoc/try&lt;/a&gt;,便可以进行简单的格式转换了。不过网页版的反应速度不是很快，不适合大型文件的格式转换，一两篇文章还是可以的。&lt;/p&gt;

&lt;h5 id=&#34;2-2-linux版pandoc&#34;&gt;2.2 Linux版Pandoc&lt;/h5&gt;

&lt;p&gt;就我自己用的ubuntu下安装Pandoc,还算是非常简单的。以下是ubuntu下的使用步骤:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install pandoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果apt-get安装的pandoc功能不齐全，可以如官网上一样先安装cable,再安装pandoc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install cabal-install
cabal update
cabal install pandoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以尝试着用一下了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc demo.md -o demo.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样便可以简单的将demo的markdown文件转换成html文档了。另外还可以强制格式转换如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc demo.txt -o demo.html -f markdown -t html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码便是将demo.txt中的文档以markdown的格式转换成html并存入demo.html中了。&lt;/p&gt;

&lt;p&gt;最关键的 &lt;strong&gt;PDF文件&lt;/strong&gt; 到了，PDF文档能在不同平台保持一致的表现，是许多文档传输的首选。在转换PDF之前,还需要安装一个texlive的包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sodu apt-get install texlive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后便可以自如的转换PDF文件了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc demo.md -o demo.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;英文文件转换状况良好，中文字体问题请参考&lt;a href=&#34;http://www.openfoundry.org/tw/foss-programs/8814-pandoc-&#34;&gt;Pandoc 用命令行转换标记语言&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Markdown与Pandoc的用法也就说到这了，无疑它们搭配起来会让写作变得更加简单专注，这也就是我们的初衷。另外在写作中多结合Git,将文档推到GitHub上会是很好的尝试。&lt;/p&gt;

&lt;h5 id=&#34;参考文档&#34;&gt;参考文档&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yangzhiping.com/tech/r-markdown-knitr.html&#34;&gt;Markdown写作浅谈&lt;/a&gt; , 阳志平&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yanping.me/cn/blog/2012/03/13/pandoc/&#34;&gt;黑魔法利器pandoc&lt;/a&gt; , 雁起平沙&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openfoundry.org/tw/foss-programs/8814-pandoc-&#34;&gt;Pandoc 用命令行转换标记语言&lt;/a&gt; , 林雪凡&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://johnmacfarlane.net/pandoc&#34;&gt;Pandoc 官网&lt;/a&gt; , John MacFarlane&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法说明&lt;/a&gt; , riku&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;tag&lt;/code&gt;: markdown,pandoc&lt;/p&gt;

&lt;p&gt;&lt;code&gt;author&lt;/code&gt;：lv&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用jupyter nbconvert转换jupyter notebook笔记为Markdown格式</title>
      <link>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8jupyter-nbconvert%E8%BD%AC%E6%8D%A2jupyter-notebook%E7%AC%94%E8%AE%B0%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Thu, 22 Dec 2016 12:59:11 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E4%BD%BF%E7%94%A8jupyter-nbconvert%E8%BD%AC%E6%8D%A2jupyter-notebook%E7%AC%94%E8%AE%B0%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</guid>
      <description>

&lt;h1 id=&#34;nbconvert&#34;&gt;nbconvert&lt;/h1&gt;

&lt;h3 id=&#34;jupyter-notebook-conversion&#34;&gt;Jupyter Notebook Conversion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/jupyter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Google%20Group-lightgrey.svg&#34; alt=&#34;Google Group&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/jupyter/nbconvert&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jupyter/nbconvert.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://nbconvert.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/nbconvert/badge/?version=latest&#34; alt=&#34;Documentation Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://nbconvert.readthedocs.io/en/stable/?badge=stable&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/nbconvert/badge/?version=stable&#34; alt=&#34;Documentation Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codecov.io/github/jupyter/nbconvert?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/jupyter/nbconvert/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;用法&#34;&gt;用法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    $ jupyter nbconvert --to &amp;lt;output format&amp;gt; &amp;lt;input notebook&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;其中：&lt;output format&gt;`可以是下面几种：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-* HTML
-* LaTeX
-* PDF
-* Reveal JS
-* Markdown (md)
-* ReStructured Text (rst)
-* executable script&lt;/p&gt;

&lt;h3 id=&#34;例子-convert-a-notebook-to-html&#34;&gt;例子: Convert a notebook to HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    $ jupyter nbconvert --to html mynotebook.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command creates an HTML output file named &lt;code&gt;mynotebook.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nbconvert.readthedocs.io/en/latest/&#34;&gt;Documentation for Jupyter nbconvert&lt;/a&gt;
[&lt;a href=&#34;https://media.readthedocs.org/pdf/nbconvert/latest/nbconvert.pdf&#34;&gt;PDF&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jupyter/nbconvert-examples&#34;&gt;nbconvert examples on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jupyter/nbconvert/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/jupyter&#34;&gt;Technical support - Jupyter Google Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jupyter.org&#34;&gt;Project Jupyter website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jupyter.readthedocs.io/en/latest/index.html&#34;&gt;Documentation for Project Jupyter&lt;/a&gt;
[&lt;a href=&#34;https://media.readthedocs.org/pdf/jupyter/latest/jupyter.pdf&#34;&gt;PDF&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>计算机三维仿真常用软件</title>
      <link>https://ten2net.github.io/2016/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BB%B4%E4%BB%BF%E7%9C%9F%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Thu, 22 Dec 2016 12:12:19 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BB%B4%E4%BB%BF%E7%9C%9F%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;地图绘制及地形数据处理软件：Global Mapper 16&lt;/li&gt;

&lt;li&gt;&lt;h2 id=&#34;三维交互电子手册制作软件-eon-professional-9-0&#34;&gt;三维交互电子手册制作软件 EON Professional 9.0&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;加拿大Presagis公司 三维建模软件：Creator 4.2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;加拿大Presagis公司 地形建模软件：Terra Vista 6.2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;加拿大Presagis公司 视景仿真软件：Vega Prime 4.1 for VC8&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h2 id=&#34;美国disti公司-虚拟仪表仿真软件-gl-studio-3-2-for-vc8&#34;&gt;美国DiSTI公司 虚拟仪表仿真软件:GL Studio 3.2  for VC8&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国MAK公司 计算机兵力生成及军事想定编辑与仿真软件：MAK VR_FORCE 3.12.0.2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国MAK公司 实时系统运行支撑软件：MAK_RTI 3.4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国MAK公司 分布式仿真连接软件开发包：VR_LINK 3.11.1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国MAK公司 三维战场态势软件：MAK stealth 6.2 、VR_VANTAGE 1.2.1&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>我的docker笔记</title>
      <link>https://ten2net.github.io/2016/12/22/%E6%88%91%E7%9A%84docker%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 22 Dec 2016 11:15:53 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E6%88%91%E7%9A%84docker%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;1-docker命令基础练习&#34;&gt;1 Docker命令基础练习&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker info
docker images
docker ps
docker version
docker run hello-world
docker pull busybox
docker exec -it busybox /bin/bash

docker run -d -p 80:80 --name webserver nginx
docker run -it alpine env
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-dockerfile使用范例&#34;&gt;2 Dockerfile使用范例&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FROM tomcat
ADD helloworld.war /usr/local/tomcat/webapps/
EXPOSE 8080
CMD [&amp;quot;catalina.sh&amp;quot;, &amp;quot;run&amp;quot;]


docker build -t mytomcat .
docker run -d -p 9280:8080 mytomcat2
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-使用-docker-7-个命令部署一个-mesos-集群&#34;&gt;3 使用 Docker， 7 个命令部署一个 Mesos 集群&lt;/h1&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://segmentfault.com/a/1190000002531072&#34;&gt;https://segmentfault.com/a/1190000002531072&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
第一步：或者 Docker 服务器的 IP 并导出到环境变量。我们将在随后的 Docker 命令中不断地使用这个 IP。
set HOST_IP=10.11.31.7
第二步：启动 ZooKeeper 容器
docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 garland/zookeeper
第三步：启动 Mesos Master
docker run --net=&amp;quot;host&amp;quot; -p 5050:5050 -e &amp;quot;MESOS_HOSTNAME=${HOST_IP}&amp;quot; -e &amp;quot;MESOS_IP=${HOST_IP}&amp;quot; -e &amp;quot;MESOS_ZK=zk://${HOST_IP}:2181/mesos&amp;quot; -e &amp;quot;MESOS_PORT=5050&amp;quot; -e &amp;quot;MESOS_LOG_DIR=/var/log/mesos&amp;quot; -e &amp;quot;MESOS_QUORUM=1&amp;quot; -e &amp;quot;MESOS_REGISTRY=in_memory&amp;quot; -e &amp;quot;MESOS_WORK_DIR=/var/lib/mesos&amp;quot; -d garland/mesosphere-docker-mesos-master
第四步：启动 Marathon
docker run -d -p 8180:8180 garland/mesosphere-docker-marathon --master zk://${HOST_IP}:2181/mesos --zk zk://${HOST_IP}:2181/marathon
第五步：在一个容器中启动 Mesos Slave
docker run -d --name mesos_slave_1 --entrypoint=&amp;quot;mesos-slave&amp;quot; -e &amp;quot;MESOS_MASTER=zk://${HOST_IP}:2181/mesos&amp;quot; -e &amp;quot;MESOS_LOG_DIR=/var/log/mesos&amp;quot; -e &amp;quot;MESOS_LOGGING_LEVEL=INFO&amp;quot; garland/mesosphere-docker-mesos-master:latest
第六步：进入 Mesos 的 webpage
http://${HOST_IP}:5050
第七步：进入 Marathon 的 webpage 启动一个任务
http://${HOST_IP}:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-使用docker-加速器&#34;&gt;4 使用Docker 加速器&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &amp;quot;DOCKER_OPTS=\&amp;quot;\$DOCKER_OPTS --registry-mirror=https://z5sa40yd.mirror.aliyuncs.com\&amp;quot;&amp;quot; | sudo tee -a /etc/default/docker sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;阿里云-我的专属加速器地址：&lt;a href=&#34;https://z5sa40yd.mirror.aliyuncs.com&#34;&gt;https://z5sa40yd.mirror.aliyuncs.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这个命令的用法忘记了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine create --virtualbox-no-vtx-check --engine-registry-mirror=https://z5sa40yd.mirror.aliyuncs.com -d virtualbox default
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;5-ui-for-docker-可视化管理docker的工具&#34;&gt;5 ui-for-docker，可视化管理Docker的工具&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Quickstart ：&lt;a href=&#34;https://github.com/kevana/ui-for-docker&#34;&gt;https://github.com/kevana/ui-for-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Open your browser to http://&lt;your Host IP&gt;:9000&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;6-docker-run-命令的常用选项说明&#34;&gt;6 Docker Run 命令的常用选项说明&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;你的Container会在你结束命令之后自动退出，使用以下的命令选项可以将容器保持在激活状态：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;-i 即使在没有附着的情况下依然保持STDIN处于开启
-t 分配一个伪TTY控制台&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;所以run命令就变成了：
&lt;code&gt;
docker run -it -d shykes/pybuilder bin/bash
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker Exec 命令可以执行正在运行的Docker容器中的Shell命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;如果希望能够附着到一个已经存在的容器中，则利用exec命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker exec -it CONTAINER_ID bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;7-常见的docker命令行命令进行详细介绍&#34;&gt;7 常见的Docker命令行命令进行详细介绍&lt;/h1&gt;

&lt;h2 id=&#34;7-1-与容器-container-相关的命令&#34;&gt;7.1 与容器（Container）相关的命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker create 会创建一个容器但是不会立刻启动&lt;/li&gt;
&lt;li&gt;docker run 会创建并且启动某个容器&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果只是希望有一个暂时性的容器，可以使用 docker run &amp;ndash;rm 将会在容器运行完毕之后删除该容器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果希望在打开某个容器之后能够与其进行交互, docker run -t -i  会创建一个TTY控制台。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker stop 会关闭某个容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker start 会启动某个容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker restart 会重新启动某个容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker rm 会删除某个容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果希望能够移除所有与该容器相关的Volume，可以使用-v参数： docker rm -v.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker kill 会发送SIGKILL信号量到某个容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker attach 会附着到某个正在运行的容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker wait 会阻塞直到某个容器关闭&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-2-与镜像-image-相关的命令&#34;&gt;7.2 与镜像（Image）相关的命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker images 会展示所有的镜像&lt;/li&gt;
&lt;li&gt;docker import 会从原始码中创建镜像&lt;/li&gt;
&lt;li&gt;docker build 会从某个Dockfile中创建镜像&lt;/li&gt;
&lt;li&gt;docker commit 会从某个Container中创建镜像&lt;/li&gt;
&lt;li&gt;docker rmi 会移除某个镜像&lt;/li&gt;
&lt;li&gt;docker load 以STDIN的方式从某个tar包中加载镜像&lt;/li&gt;
&lt;li&gt;docker save 以STDOUT的方式将镜像存入到某个tar包中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-3-查看docker容器状态信息的命令&#34;&gt;7.3 查看Docker容器状态信息的命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker ps 会列举出所有正在运行的容器&lt;/li&gt;
&lt;li&gt;docker ps -a 会展示出所有正在运行的和已经停止的容器&lt;/li&gt;
&lt;li&gt;docker logs 从某个容器中获取log日志&lt;/li&gt;
&lt;li&gt;docker inspect 检测关于某个容器的详细信息&lt;/li&gt;
&lt;li&gt;docker events 从某个容器中获取所有的事件&lt;/li&gt;
&lt;li&gt;docker port 获取某个容器的全部的开放端口&lt;/li&gt;
&lt;li&gt;docker top 展示某个容器中运行的全部的进程&lt;/li&gt;
&lt;li&gt;docker stats 展示某个容器中的资源的使用情况的统计信息&lt;/li&gt;
&lt;li&gt;docker diff 展示容器中文件的变化情况&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-4-查看docker镜像-image-状态信息的命令&#34;&gt;7.4 查看Docker镜像（Image）状态信息的命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker history 展示镜像的全部历史信息&lt;/li&gt;
&lt;li&gt;docker tag 为某个容器设置标签&lt;/li&gt;
&lt;li&gt;Import&amp;amp;Export&lt;/li&gt;
&lt;li&gt;docker cp 在容器与本地文件系统之间进行文件复制&lt;/li&gt;
&lt;li&gt;docker export 将某个容器中的文件系统的内容输出到某个tar文件中&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;8-实验machine-learning-过程中练习的命令&#34;&gt;8 实验Machine Learning 过程中练习的命令&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;docker run  ermaker/keras&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker run -d -p 8888:8888 -e KERAS_BACKEND=tensorflow ermaker/keras-jupyter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker run -d -p 8888:8888 &amp;ndash;name keraslearning  &amp;ndash;restart=always  -v /notebook:/notebook ermaker/keras-jupyter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker run -d -p 8888:8888 &amp;ndash;name keraslearning   &amp;ndash;restart=always -v E:/python-dev-home:/notebook ermaker/keras-jupyter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;docker run -d -p 8888:8888 &amp;ndash;name keraslearning &amp;ndash;restart=always -v E:/python-dev-home:/notebook ermaker/keras-jupyter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nvidia-docker run  -d -p 5001:5000 -v /dataOne:/opt &amp;ndash;name digits &amp;ndash;restart=always  kaixhin/cuda-digits:8.0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;9-其它常用命令&#34;&gt;9 其它常用命令&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # 像Docker官方的hello world例子一样，拉取一个叫busybox的镜像
    docker pull busybox
    
    #进入容器bash
    docker exec -i keraslearning bash

    # 查看本地已经有哪些镜像
    # 我们可以看到busybox
    docker images

    # 现在让我们来修改下busybox镜像的容器
    # 这次，我们创建一个文件夹
    docker run busybox mkdir /home/test


    #从容器keraslearning中复制/notebook目录到当前目录
    docker cp keraslearning:/notebook .

    #从当前目录复制test子目录到容器keraslearning中/notebook目录下
    docker cp test keraslearning:/notebook

    # 让我们再看看我们有哪些镜像了。
    # 注意每条命令执行后容器都会停止
    # 可以看到有一个busybox容器
    docker ps -a

    # 现在，可以提交修改了。
    # 提交后会看到一个新的镜像busybox-1
    #  &amp;lt;CONTAINER ID&amp;gt; 是刚刚修改容器后得到的ID
    docker commit &amp;lt;CONTAINER ID&amp;gt; busybox-1

    # 再看看我们有哪些镜像。
    # 我们现在同时有busybox和busybox-1镜像了。
    docker images

    # 我们执行以下命令，看看这两个镜像有什么不同
    docker run busybox [ -d /home/test ] &amp;amp;&amp;amp; echo &#39;Directory found&#39; || echo &#39;Directory not found&#39;
    docker run busybox-1 [ -d /home/test ] &amp;amp;&amp;amp; echo &#39;Directory found&#39; || echo &#39;Directory not found&#39;


    # 查看所有的容器
    docker ps -a

    # 删除它们
    docker rm &amp;lt;CONTAINER ID&amp;gt;

    # 查看所有的镜像
    docker images

    # 删除它们
    docker rmi busybox-1
    docker rmi busybox

    注：可以使用 docker rm $(docker ps -q -a) 一次性删除所有的容器，docker rmi $(docker images -q) 一次性删除所有的镜像。

    #导出容器
    docker export &amp;lt;CONTAINER ID&amp;gt; -o containers/export123.tar

    #导出镜像
    docker save -o gds-keras-jupyter.tar gds/keraslearning

    #快照容器的当前状态为一个镜像
    docker commit 0d8facbc75e2 gds/keraslearning


    现在我们创建了两个Tar文件，让我们来看看它们是什么。首先做一下小清理——把所有的容器和镜像都删除：

    # 查看所有的容器
    sudo docker ps -a

    # 删除它们
    sudo docker rm &amp;lt;CONTAINER ID&amp;gt;

    # 查看所有的镜像
    sudo docker images

    # 删除它们
    sudo docker rmi busybox-1
    sudo docker rmi busybox
    注：可以使用 docker rm $(docker ps -q -a) 一次性删除所有的容器，docker rmi $(docker images -q) 一次性删除所有的镜像。

    现在开始导入刚刚导出的容器：

    # 导入export.tar文件
    cat /home/export.tar | sudo docker import - busybox-1-export:latest

    # 查看镜像
    sudo docker images

    # 检查是否导入成功，就是启动一个新容器，检查里面是否存在/home/test目录（是存在的）
    sudo docker run busybox-1-export [ -d /home/test ] &amp;amp;&amp;amp; echo &#39;Directory found&#39; || echo &#39;Directory not found&#39;
    使用类似的步骤导入镜像：

    # 导入save.tar文件
    docker load &amp;lt; /home/save.tar
    docker load -i /home/save.tar

    # 查看镜像
    sudo docker images

    # 检查是否导入成功，就是启动一个新容器，检查里面是否存在/home/test目录（是存在的）
    sudo docker run busybox-1 [ -d /home/test ] &amp;amp;&amp;amp; echo &#39;Directory found&#39; || echo &#39;Directory not found&#39;
    那，它们之间到底存在什么不同呢？我们发现导出后的版本会比原来的版本稍微小一些。那是因为导出后，会丢失历史和元数据。执行下面的命令就知道了：

    # 显示镜像的所有层(layer)
    sudo docker images --tree
     执行命令，显示下面的内容。正你看到的，导出后再导入(exported-imported)的镜像会丢失所有的历史，而保存后再加载（saveed-loaded）的镜像没有丢失历史和层(layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回滚（可以执行docker tag &amp;lt;LAYER ID&amp;gt; &amp;lt;IMAGE NAME&amp;gt;来回滚之前的层）。

    sudo docker images --tree
    ├─f502877df6a1 Virtual Size: 2.489 MB Tags: busybox-1-export:latest
    └─511136ea3c5a Virtual Size: 0 B
      └─bf747efa0e2f Virtual Size: 0 B
        └─48e5f45168b9 Virtual Size: 2.489 MB
          └─769b9341d937 Virtual Size: 2.489 MB
            └─227516d93162 Virtual Size: 2.489 MB Tags: busybox-1:latest

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>深度学习库Keras快速入门笔记</title>
      <link>https://ten2net.github.io/2016/12/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93keras%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 22 Dec 2016 11:15:53 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93keras%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;如何开始&#34;&gt;如何开始&lt;/h1&gt;

&lt;h2 id=&#34;1-光标移动到下面的-import-keras-cell中&#34;&gt;1、光标移动到下面的 import keras   Cell中；&lt;/h2&gt;

&lt;h2 id=&#34;2-shift-enter或点击上面的运行按钮-类似播放&#34;&gt;2、Shift+Enter或点击上面的运行按钮（类似播放）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  出现Using Theano backend.那么Keras就已经成功安装了
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import keras
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#查看mnist数据集
%matplotlib inline
from keras.datasets import mnist
from matplotlib import pyplot as plt
# load data
(X_train, y_train), (X_test, y_test) = mnist.load_data(&amp;quot;/notebook/datasets/mnist.pkl&amp;quot;)
# create a grid of 3x3 images
for i in range(0, 9):
    plt.subplot(330 + 1 + i)
    plt.imshow(X_train[i], cmap=plt.get_cmap(&#39;gray&#39;))
# show the plot
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from matplotlib import pyplot as plt

from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.models import model_from_json
import numpy
import os
# 为了多次执行再现结果，这只一个固定的随机数   fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# 加载数据集 load pima indians dataset
dataset = numpy.loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# 分开数据集为输入和输出两部分  split into input (X) and output (Y) variables
X = dataset[:,0:8]
Y = dataset[:,8]

print (X.shape,Y.shape)
print (Y)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(768, 8) (768,)
[ 1.  0.  1.  0.  1.  0.  1.  0.  1.  1.  0.  1.  0.  1.  1.  1.  1.  1.
  0.  1.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.  0.  1.  0.  0.  0.  0.
  0.  1.  1.  1.  0.  0.  0.  1.  0.  1.  0.  0.  1.  0.  0.  0.  0.  1.
  0.  0.  1.  0.  0.  0.  0.  1.  0.  0.  1.  0.  1.  0.  0.  0.  1.  0.
  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.
  0.  0.  0.  1.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.
  0.  1.  1.  1.  0.  0.  1.  1.  1.  0.  0.  0.  1.  0.  0.  0.  1.  1.
  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.
  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  1.  1.  0.  0.  0.  1.  0.  0.
  0.  0.  1.  1.  0.  0.  0.  0.  1.  1.  0.  0.  0.  1.  0.  1.  0.  1.
  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  1.  1.  0.  1.  0.  1.
  1.  1.  0.  0.  0.  0.  0.  0.  1.  1.  0.  1.  0.  0.  0.  1.  1.  1.
  1.  0.  1.  1.  1.  1.  0.  0.  0.  0.  0.  1.  0.  0.  1.  1.  0.  0.
  0.  1.  1.  1.  1.  0.  0.  0.  1.  1.  0.  1.  0.  0.  0.  0.  0.  0.
  0.  0.  1.  1.  0.  0.  0.  1.  0.  1.  0.  0.  1.  0.  1.  0.  0.  1.
  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  1.  1.  0.  0.  1.
  0.  0.  0.  1.  1.  1.  0.  0.  1.  0.  1.  0.  1.  1.  0.  1.  0.  0.
  1.  0.  1.  1.  0.  0.  1.  0.  1.  0.  0.  1.  0.  1.  0.  1.  1.  1.
  0.  0.  1.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  1.  1.  1.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  1.  1.  1.  0.  1.
  1.  0.  0.  1.  0.  0.  1.  0.  0.  1.  1.  0.  0.  0.  0.  1.  0.  0.
  1.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  1.  0.  0.  1.  0.
  0.  1.  0.  1.  1.  0.  1.  0.  1.  0.  1.  0.  1.  1.  0.  0.  0.  0.
  1.  1.  0.  1.  0.  1.  0.  0.  0.  0.  1.  1.  0.  1.  0.  1.  0.  0.
  0.  0.  0.  1.  0.  0.  0.  0.  1.  0.  0.  1.  1.  1.  0.  0.  1.  0.
  0.  1.  0.  0.  0.  1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  1.  1.
  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.
  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.
  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.
  1.  1.  1.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.
  0.  1.  0.  1.  1.  0.  0.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.  0.
  0.  1.  0.  0.  1.  0.  0.  0.  0.  1.  1.  0.  1.  0.  0.  0.  0.  1.
  1.  0.  1.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
  1.  0.  0.  0.  0.  1.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  1.  1.
  1.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  1.  1.  1.  1.  0.
  1.  1.  0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  1.  0.  0.  1.  0.  1.
  0.  0.  0.  0.  0.  1.  0.  1.  0.  1.  0.  1.  1.  0.  0.  0.  0.  1.
  1.  0.  0.  0.  1.  0.  1.  1.  0.  0.  1.  0.  0.  1.  1.  0.  0.  1.
  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.
  0.  1.  1.  0.  0.  1.  0.  0.  1.  0.  1.  1.  1.  0.  0.  1.  1.  1.
  0.  1.  0.  1.  0.  1.  0.  0.  0.  0.  1.  0.]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from matplotlib import pyplot as plt

from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.models import model_from_json
import numpy
import os
# 为了多次执行再现结果，这只一个固定的随机数   fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# 加载数据集 load pima indians dataset
dataset = numpy.loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# 分开数据集为输入和输出两部分  split into input (X) and output (Y) variables
X = dataset[:,0:8]
Y = dataset[:,8]

# 创建模型 create model
model = Sequential()
model.add(Dense(12, input_dim=8, init=&#39;uniform&#39;, activation=&#39;relu&#39;))
model.add(Dense(8, init=&#39;uniform&#39;, activation=&#39;relu&#39;))
model.add(Dense(1, init=&#39;uniform&#39;, activation=&#39;sigmoid&#39;))
# 编译模型 Compile model
model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
# 训练模型  Fit the model
history= model.fit(X, Y,validation_split=0.25, nb_epoch=300, batch_size=10, verbose=0)

# 评估模型 evaluate the model
scores = model.evaluate(X, Y, verbose=0)
print(&amp;quot;%s: %.2f%%&amp;quot; % (model.metrics_names[1], scores[1]*100))
 
# 保存模型 serialize model to JSON
model_json = model.to_json()
with open(&amp;quot;./models/diabetes-model.json&amp;quot;, &amp;quot;w&amp;quot;) as json_file:
    json_file.write(model_json)
# 保存权重 serialize weights to HDF5
model.save_weights(&amp;quot;./models/diabetes-model.h5&amp;quot;)
print(&amp;quot;Saved model to disk&amp;quot;)

#训练过程可视化
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history[&#39;acc&#39;])
plt.plot(history.history[&#39;val_acc&#39;])
plt.title(&#39;model accuracy&#39;)
plt.ylabel(&#39;accuracy&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()
# summarize history for loss
plt.plot(history.history[&#39;loss&#39;])
plt.plot(history.history[&#39;val_loss&#39;])
plt.title(&#39;model loss&#39;)
plt.ylabel(&#39;loss&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;acc: 80.08%
Saved model to disk
dict_keys([&#39;val_acc&#39;, &#39;val_loss&#39;, &#39;loss&#39;, &#39;acc&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_4_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_4_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;使用正则化和dropout&#34;&gt;使用正则化和Dropout&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from matplotlib import pyplot as plt

from keras.models import Sequential
from keras.layers import Dense,Dropout,Activation
from keras.models import model_from_json
import numpy
import os
#正则化
# import BatchNormalization
from keras.layers.normalization import BatchNormalization

# 为了多次执行再现结果，这只一个固定的随机数   fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# 加载数据集 load pima indians dataset
dataset = numpy.loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# 分开数据集为输入和输出两部分  split into input (X) and output (Y) variables
X = dataset[:,0:8]
Y = dataset[:,8]

# 创建模型 create model
model = Sequential()
model.add(Dense(12, input_dim=8, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;relu&#39;))
model.add(Dropout(0.5))

model.add(Dense(8, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;relu&#39;))
model.add(Dropout(0.5))

model.add(Dense(1, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;sigmoid&#39;))

# 编译模型 Compile model
model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
# 训练模型  Fit the model
history= model.fit(X, Y,validation_split=0.25, nb_epoch=300, batch_size=10, verbose=0)

# 评估模型 evaluate the model
scores = model.evaluate(X, Y, verbose=0)
print(&amp;quot;%s: %.2f%%&amp;quot; % (model.metrics_names[1], scores[1]*100))
 
# 保存模型 serialize model to JSON
model_json = model.to_json()
with open(&amp;quot;./models/diabetes-model.json&amp;quot;, &amp;quot;w&amp;quot;) as json_file:
    json_file.write(model_json)
# 保存权重 serialize weights to HDF5
model.save_weights(&amp;quot;./models/diabetes-model.h5&amp;quot;)
print(&amp;quot;Saved model to disk&amp;quot;)

#训练过程可视化
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history[&#39;acc&#39;])
plt.plot(history.history[&#39;val_acc&#39;])
plt.title(&#39;model accuracy&#39;)
plt.ylabel(&#39;accuracy&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()
# summarize history for loss
plt.plot(history.history[&#39;loss&#39;])
plt.plot(history.history[&#39;val_loss&#39;])
plt.title(&#39;model loss&#39;)
plt.ylabel(&#39;loss&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;acc: 76.69%
Saved model to disk
dict_keys([&#39;val_acc&#39;, &#39;val_loss&#39;, &#39;loss&#39;, &#39;acc&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_6_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_6_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;使用sgd优化器&#34;&gt;使用SGD优化器&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from matplotlib import pyplot as plt

from keras.models import Sequential
from keras.optimizers import SGD
from keras.layers import Dense,Dropout,Activation
from keras.models import model_from_json
import numpy
import os
#正则化
# import BatchNormalization
from keras.layers.normalization import BatchNormalization

# 为了多次执行再现结果，这只一个固定的随机数   fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# 加载数据集 load pima indians dataset
dataset = numpy.loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# 分开数据集为输入和输出两部分  split into input (X) and output (Y) variables
X = dataset[:,0:8]
Y = dataset[:,8]

# 创建模型 create model
model = Sequential()
model.add(Dense(12, input_dim=8, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;relu&#39;))
model.add(Dropout(0.5))

model.add(Dense(8, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;relu&#39;))
model.add(Dropout(0.5))

model.add(Dense(1, init=&#39;uniform&#39;))
model.add(BatchNormalization())
model.add(Activation(&#39;sigmoid&#39;))

# 编译模型 Compile model
sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=sgd, metrics=[&#39;accuracy&#39;])
# 训练模型  Fit the model
history= model.fit(X, Y,validation_split=0.25, nb_epoch=300, batch_size=10, verbose=0)

# 评估模型 evaluate the model
scores = model.evaluate(X, Y, verbose=0)
print(&amp;quot;%s: %.2f%%&amp;quot; % (model.metrics_names[1], scores[1]*100))
 
# 保存模型 serialize model to JSON
model_json = model.to_json()
with open(&amp;quot;./models/diabetes-model.json&amp;quot;, &amp;quot;w&amp;quot;) as json_file:
    json_file.write(model_json)
# 保存权重 serialize weights to HDF5
model.save_weights(&amp;quot;./models/diabetes-model.h5&amp;quot;)
print(&amp;quot;Saved model to disk&amp;quot;)

#训练过程可视化
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history[&#39;acc&#39;])
plt.plot(history.history[&#39;val_acc&#39;])
plt.title(&#39;model accuracy&#39;)
plt.ylabel(&#39;accuracy&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()
# summarize history for loss
plt.plot(history.history[&#39;loss&#39;])
plt.plot(history.history[&#39;val_loss&#39;])
plt.title(&#39;model loss&#39;)
plt.ylabel(&#39;loss&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;acc: 76.69%
Saved model to disk
dict_keys([&#39;val_acc&#39;, &#39;val_loss&#39;, &#39;loss&#39;, &#39;acc&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_8_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_8_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from matplotlib import pyplot as plt
from keras.callbacks import EarlyStopping,ModelCheckpoint
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.models import model_from_json
import numpy as np
import os
# 为了多次执行再现结果，这只一个固定的随机数   fix random seed for reproducibility
seed = 7
np.random.seed(seed)
# 加载数据集 load pima indians dataset
dataset = numpy.loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# 分开数据集为输入和输出两部分  split into input (X) and output (Y) variables
X = dataset[:,0:8]
Y = dataset[:,8]

# 创建模型 create model
model = Sequential()
model.add(Dense(12, input_dim=8, init=&#39;uniform&#39;, activation=&#39;relu&#39;))
model.add(Dense(8, init=&#39;uniform&#39;, activation=&#39;relu&#39;))
model.add(Dense(1, init=&#39;uniform&#39;, activation=&#39;sigmoid&#39;))
# 编译模型 Compile model
model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])

#--早停 和检查点-callback---
filepath=&amp;quot;./temp/diabetes-weights-improvement-{epoch:02d}-{val_acc:.2f}.hdf5&amp;quot;
checkpoint = ModelCheckpoint(filepath, monitor=&#39;val_acc&#39;, verbose=1, save_best_only=True, mode=&#39;max&#39;)
checkpoint2=ModelCheckpoint(&amp;quot;./temp/diabetes-weights.{epoch:02d}-{val_loss:.2f}.h5&amp;quot;, monitor=&#39;val_loss&#39;, verbose=0, save_best_only=False, mode=&#39;auto&#39;)
#当监测值不再改善时，该回调函数将中止训练
   # patience：当early stop被激活（如发现loss相比上一个epoch训练没有下降），
    # 则经过patience个epoch后停止训练。
estop = EarlyStopping(monitor=&#39;val_loss&#39;, patience=5, verbose=0, mode=&#39;auto&#39;)
#--------------------------------------

# 训练模型  Fit the model
history= model.fit(X, Y,validation_split=0.5, nb_epoch=150, batch_size=10, verbose=0,callbacks=[checkpoint,checkpoint2,estop])

# 评估模型 evaluate the model
scores = model.evaluate(X, Y, verbose=0)
print(&amp;quot;%s: %.2f%%&amp;quot; % (model.metrics_names[1], scores[1]*100))
 
# 保存模型 serialize model to JSON
model_json = model.to_json()
with open(&amp;quot;./models/diabetes-model.json&amp;quot;, &amp;quot;w&amp;quot;) as json_file:
    json_file.write(model_json)
# 保存权重 serialize weights to HDF5
model.save_weights(&amp;quot;./models/diabetes-model.h5&amp;quot;)
print(&amp;quot;Saved model to disk&amp;quot;)

#训练过程可视化
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history[&#39;acc&#39;])
plt.plot(history.history[&#39;val_acc&#39;])
plt.title(&#39;model accuracy&#39;)
plt.ylabel(&#39;accuracy&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()
# summarize history for loss
plt.plot(history.history[&#39;loss&#39;])
plt.plot(history.history[&#39;val_loss&#39;])
plt.title(&#39;model loss&#39;)
plt.ylabel(&#39;loss&#39;)
plt.xlabel(&#39;epoch&#39;)
plt.legend([&#39;train&#39;, &#39;test&#39;], loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Epoch 00000: val_acc improved from -inf to 0.68490, saving model to ./temp/diabetes-weights-improvement-00-0.68.hdf5
Epoch 00001: val_acc did not improve
Epoch 00002: val_acc did not improve
Epoch 00003: val_acc did not improve
Epoch 00004: val_acc did not improve
Epoch 00005: val_acc did not improve
Epoch 00006: val_acc improved from 0.68490 to 0.69010, saving model to ./temp/diabetes-weights-improvement-06-0.69.hdf5
Epoch 00007: val_acc did not improve
Epoch 00008: val_acc did not improve
Epoch 00009: val_acc did not improve
Epoch 00010: val_acc did not improve
Epoch 00011: val_acc improved from 0.69010 to 0.69010, saving model to ./temp/diabetes-weights-improvement-11-0.69.hdf5
Epoch 00012: val_acc did not improve
Epoch 00013: val_acc did not improve
Epoch 00014: val_acc did not improve
Epoch 00015: val_acc did not improve
Epoch 00016: val_acc did not improve
Epoch 00017: val_acc did not improve
Epoch 00018: val_acc did not improve
Epoch 00019: val_acc did not improve
Epoch 00020: val_acc did not improve
Epoch 00021: val_acc did not improve
Epoch 00022: val_acc did not improve
Epoch 00023: val_acc did not improve
Epoch 00024: val_acc did not improve
Epoch 00025: val_acc did not improve
Epoch 00026: val_acc did not improve
Epoch 00027: val_acc did not improve
Epoch 00028: val_acc did not improve
Epoch 00029: val_acc did not improve
Epoch 00030: val_acc did not improve
Epoch 00031: val_acc did not improve
acc: 69.01%
Saved model to disk
dict_keys([&#39;val_acc&#39;, &#39;val_loss&#39;, &#39;loss&#39;, &#39;acc&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_9_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/index-readme_files/index-readme_9_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;loss, accuracy = model.evaluate(X_test,Y_test, verbose=0)
predicted_classes = model.predict_classes(X_test)
correct_classified_indices = np.nonzero(predicted_classes == y_test)[0]
incorrect_classified_indices = np.nonzero(predicted_classes != y_test)[0]
correct_classified_indices
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 14, 15, 16])
incorrect_classified_indices
array([ 0, 13])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用digits进行finetune</title>
      <link>https://ten2net.github.io/2016/12/21/%E4%BD%BF%E7%94%A8digits%E8%BF%9B%E8%A1%8Cfinetune/</link>
      <pubDate>Wed, 21 Dec 2016 17:45:00 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/21/%E4%BD%BF%E7%94%A8digits%E8%BF%9B%E8%A1%8Cfinetune/</guid>
      <description>

&lt;h1 id=&#34;一-下载model参数&#34;&gt;一、下载model参数&lt;/h1&gt;

&lt;p&gt;可以直接在浏览器里输入地址下载，也可以运行脚本文件下载。下载地址为：&lt;a href=&#34;http://dl.caffe.berkeleyvision.org/bvlc_reference_caffenet.caffemodel&#34;&gt;http://dl.caffe.berkeleyvision.org/bvlc_reference_caffenet.caffemodel&lt;/a&gt;
文件名称为：bvlc_reference_caffenet.caffemodel，文件大小为230M左右，为了代码的统一，将这个caffemodel文件下载到caffe根目录下的 models/bvlc_reference_caffenet/ 文件夹下面。也可以运行脚本文件进行下载：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# sudo ./scripts/download_model_binary.py models/bvlc_reference_caffenet
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;二-准备数据&#34;&gt;二、准备数据&lt;/h1&gt;

&lt;p&gt;将训练数据放在一个文件夹内。比如我在当前用户根目录下创建了一个data文件夹，专门用来存放数据，因此我的训练图片路径为：/home/xxx/data/re/train
打开浏览器，运行digits，新建一个classification dataset,设置如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/images/digits/image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;下面图片格式选为jpg, 为dataset取一个名字，就开始转换吧。结果如图：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/images/digits/image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;三-设置model&#34;&gt;三、设置model&lt;/h1&gt;

&lt;p&gt;回到digits根目录，新建一个classification model， 选中你的dataset, 开始设置最重要的network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ten2net.github.io/post/images/digits/image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;caffenet的网络配置文件，放在 caffe/models/bvlc_reference_caffenet/ 这个文件夹里面，名字叫train_val.prototxt。打开这个文件，将里面的内容复制到上图的Custom Network文本框里，然后进行修改，主要修改这几个地方：&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-修改train阶段的data层为&#34;&gt;1、修改train阶段的data层为：&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;layer {
  name: &amp;quot;data&amp;quot;
  type: &amp;quot;Data&amp;quot;
  top: &amp;quot;data&amp;quot;
  top: &amp;quot;label&amp;quot;
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;即把均值文件（mean_file)、数据源文件(source)、批次大小(batch_size)和数据源格式（backend)这四项都删除了。因为这四项系统会根据dataset和页面左边“solver options&amp;raquo;的设置自动生成。如果想用原始数据训练，可以不用crop_size，即图像数据不会crop,按照原始图像大小训练。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-修改test阶段的data层-和上面一样-也是删除那些项&#34;&gt;2、修改test阶段的data层：和上面一样，也是删除那些项。&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;layer {
  name: &amp;quot;data&amp;quot;
  type: &amp;quot;Data&amp;quot;
  top: &amp;quot;data&amp;quot;
  top: &amp;quot;label&amp;quot;
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-修改最后一个全连接层-fc8&#34;&gt;3、修改最后一个全连接层（fc8)：&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;layer {
  name: &amp;quot;fc8-re&amp;quot;               #原来为&amp;quot;fc8&amp;quot;
  type: &amp;quot;InnerProduct&amp;quot;
  bottom: &amp;quot;fc7&amp;quot;
  top: &amp;quot;fc8&amp;quot;
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 5        #原来为&amp;quot;1000&amp;quot;
    weight_filler {
      type: &amp;quot;gaussian&amp;quot;
      std: 0.01
    }
    bias_filler {
      type: &amp;quot;constant&amp;quot;
      value: 0.0
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;看注释的地方，就只有两个地方修改，其它不变。&lt;/li&gt;
&lt;li&gt;设置好后，就可以开始微调了(fine tuning).&lt;/li&gt;
&lt;li&gt;训练结果就是一个新的model，可以用来单张图片和多张图片测试。在此，将别人训练好的model用到我们自己的图片分类上，整个微调过程就是这样了。如果你不用digits，而直接用命令操作，那就更简单，只需要修改一个train_val.prototxt的配置文件就可以了，其它都是一样的操作。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;【注意】新版digits的网络结构是针对所有网络的，即包括的训练的网络结构，测试的网络结构和验证的网络结构，即在一个.prototxt 中包含了train/val/deploy 所有的结构。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果使用新版digits，除了上面数据层和最后一个全连接层的改动外，还有以下3处：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;（1）修改accuracy层，删除原来phase: TEST修改为stage: &amp;laquo;val&amp;raquo;，下图的-表示删除，+表示增加，后面的均是这样表示。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;layer {
name: &amp;quot;accuracy&amp;quot;
     type: &amp;quot;Accuracy&amp;quot;
     bottom: &amp;quot;output&amp;quot;
     bottom: &amp;quot;label&amp;quot;
     top: &amp;quot;accuracy&amp;quot;
-     include {
-         phase: TEST
-     }
+    include { stage: &amp;quot;val&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;（2）修改loss层，增加exclude { stage: &amp;laquo;deploy&amp;raquo; }，表示loss只在训练和验证中计算，测试时不计算。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;layer {
       name: &amp;quot;loss&amp;quot;
       type: &amp;quot;SoftmaxWithLoss&amp;quot;
       bottom: &amp;quot;output&amp;quot;
       bottom: &amp;quot;label&amp;quot;
       top: &amp;quot;loss&amp;quot;
+     exclude { stage: &amp;quot;deploy&amp;quot; }
+}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;（3）增加softmax层，该层不在训练和验证中计算，只在测试时计算。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;+ layer {
+      name: &amp;quot;softmax&amp;quot;
+      type: &amp;quot;Softmax&amp;quot;
+      bottom: &amp;quot;output&amp;quot;
+      top: &amp;quot;softmax&amp;quot;
+         include { stage: &amp;quot;deploy&amp;quot; }
+}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Opencv在Ubuntu上的安装过程</title>
      <link>https://ten2net.github.io/2016/12/21/opencv%E5%9C%A8ubuntu%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 21 Dec 2016 09:52:09 +0800</pubDate>
      <author>wangf@e-u.cn (wangf)</author>
      <guid>https://ten2net.github.io/2016/12/21/opencv%E5%9C%A8ubuntu%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</guid>
      <description>

&lt;h1 id=&#34;一-阅读-https-www-raben-com-content-opencv-installation-ubuntu-1204&#34;&gt;一、&lt;a href=&#34;https://www.raben.com/content/opencv-installation-ubuntu-1204&#34;&gt;阅读&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;二-安装依赖&#34;&gt;二、安装依赖&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To install OpenCV 2.4.2 or 2.4.3 on the Ubuntu 12.04 operating system, first install a developer environment to build OpenCV.
apt-get -y install build-essential cmake pkg-config&lt;/li&gt;
&lt;li&gt;Install Image I/O libraries
apt-get -y install libjpeg62-dev
apt-get -y install libtiff4-dev libjasper-dev&lt;/li&gt;
&lt;li&gt;Install the GTK dev library
apt-get -y install  libgtk2.0-dev&lt;/li&gt;
&lt;li&gt;Install Video I/O libraries
apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev&lt;/li&gt;
&lt;li&gt;Optional - install support for Firewire video cameras
apt-get -y install libdc1394-22-dev&lt;/li&gt;
&lt;li&gt;Optional - install video streaming libraries
apt-get -y install libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev&lt;/li&gt;
&lt;li&gt;Optional - install the Python development environment and the Python Numerical library
apt-get -y install python-dev python-numpy&lt;/li&gt;
&lt;li&gt;Optional - install the parallel code processing library (the Intel tbb library)
apt-get -y install libtbb-dev&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optional - install the Qt dev library
apt-get -y install libqt4-dev&lt;/p&gt;

&lt;h1 id=&#34;三-安装opencv&#34;&gt;三、安装opencv&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;wget &lt;a href=&#34;https://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.13/opencv-2.4.13.zip&#34;&gt;https://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.13/opencv-2.4.13.zip&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unzip opencv-2.4.13.zip&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd opencv-2.4.13&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#（可选，若出现list_filterout错误）修改samples/gpu/CMakeLists.txt 文件的106、109、110、111、112五行代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;	 if(NOT HAVE_OPENGL)
	 #   list_filterout(install_list &amp;quot;.*opengl.cpp&amp;quot;)
	  endif()
	  if(NOT HAVE_CUDA)
	 #   list_filterout(install_list &amp;quot;.*opticalflow_nvidia_api.cpp&amp;quot;)
	 #   list_filterout(install_list &amp;quot;.*cascadeclassifier_nvidia_api.cpp&amp;quot;)
	 #   list_filterout(install_list &amp;quot;.*driver_api_multi.cpp&amp;quot;)
	 #   list_filterout(install_list &amp;quot;.*driver_api_stereo_multi.cpp&amp;quot;)
	  endif()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;mkdir build&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd build&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local  -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_FFMPEG=OFF    -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON     -D BUILD_EXAMPLES=OFF -D WITH_QT=OFF -D WITH_OPENGL=OFF ..&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make install&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;四-问题&#34;&gt;四、问题&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;### 解决1394问题
ln /dev/null /dev/raw1394
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;五-测试&#34;&gt;五、测试&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;&amp;gt;&amp;gt;&amp;gt;import cv2&lt;/li&gt;
&lt;li&gt;不报错即表示安装成功&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;附：安装gnome后出现中文乱码的问题
  apt-get install gnome-language-selector
  然后在Xterm中执行
  #gnome-language-selector&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>